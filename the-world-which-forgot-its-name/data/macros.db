{"name":"Show Tokens Resistances","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"// Prints the condition immunities, damage immunities, damage resistances and damage vulnerabilities of the currently selected token(s).\n// Damage types that appeared in the previous chat message (e.g. due to a roll) are highlighted in red. \n// A DM can call this macro after a player rolled damage to quickly see if they need to apply full, half or double damage.\n//\n// Author: https://github.com/Nijin22\n// Licence: MIT, see https://choosealicense.com/licenses/mit/\n\nconst damageTypes = [\"Acid\", \"Bludgeoning\", \"Cold\", \"Fire\", \"Force\", \"Lightning\", \"Necrotic\", \"Piercing\", \"Non-Magical Physical\",\n                     \"Piercing\", \"Poison\", \"Psychic\", \"Radiant\", \"Slashing\", \"Thunder\",\n                     \"Bludgeoning, Piercing, and Slashing from Nonmagical Attacks\"];\n\nlet msg = \"\";\nlet previousMessage;\ntry { \n    previousMessage = game.messages.entries[game.messages.entries.length-1].data.content;\n} catch (e) {\n    // No previous message in log. Default to an empty string.\n    previousMessage = \"\";\n}\n\n// Enable case-insensitive replacements\n// Source: https://stackoverflow.com/a/7313467\nString.prototype.replaceAllCaseInsensitive = function(strReplace, strWith) {\n    // See http://stackoverflow.com/a/3561711/556609\n    var esc = strReplace.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    var reg = new RegExp(esc, 'ig');\n    return this.replace(reg, strWith);\n};\n\n\n// Get traits\nconst traits = new Map();\ntraits.set(\"ci\", \"Condition Immunities\");\ntraits.set(\"di\", \"Damage Immunities (No damage)\");\ntraits.set(\"dr\", \"Damage Resistances (Half damage)\");\ntraits.set(\"dv\", \"Damage Vulnerabilities (Double dmg)\");\ncanvas.tokens.controlled.forEach(token => {\n    let name = token.actor.name;\n    msg += `<h2>${name}</h2>`;\n    \n    traits.forEach((traitDescr, traitId, map) => {\n        // Clone 'default' 5e trait array\n        var allTraits = [...token.actor.data.data.traits[traitId].value];\n        \n        // Custom traits\n        allTraits = allTraits.concat(token.actor.data.data.traits[traitId].custom.split(\";\").map(x => x.trim()));\n        \n        var printableTraits = allTraits.join(\"; \");\n        if (printableTraits.length == 0) {\n            printableTraits = \"-\";\n        }\n        msg += `<h3>${traitDescr}</h3><p>${printableTraits}</p>`;\n    });\n});\n\n// highlight words from previous message\nlet damageTypesOfPrevousMsg = [];\ndamageTypes.forEach(damageType => {\n    if (previousMessage.toLowerCase().indexOf(damageType.toLowerCase()) != -1){\n        damageTypesOfPrevousMsg.push(damageType);\n    }\n});\ndamageTypesOfPrevousMsg.forEach(damageType => {\n    msg = msg.replaceAllCaseInsensitive(damageType, `<span style=\"color:red; font-weight: bold;\">${damageType}</span>`);\n});\n\n\nif (msg.length === 0) {\n    msg = \"No tokens selected.\";\n}\n\nui.notifications.info(msg);\n\n// Post message to self\n/*ChatMessage.create({\n    content: msg,\n    whisper: [game.user._id]\n});*/","folder":"dz7rvMlddmEBAhGn","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Macro.4WhSSiHXlbcvP7f6"}},"_id":"1FwdYRSHRjuA3JqC"}
{"name":"Full Scene vision","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"// This macro will effectively set the vision area in a scene to the entire gridded area\n// without having to shift any walls or tiles or tokens.\n// It will do this by removing the scene padding by setting it to 0,\n//  then changing the scene dimensions so the overall scene keeps the exact same size\n// It will also move the background image into a tile so it can be positiioned \n// at the same position as it was when the scene had padding\n\nconst width = canvas.scene.data.width;\nconst height = canvas.scene.data.height;\nconst grid = canvas.scene.data.grid;\nconst img = canvas.scene.data.img;\nconst padding = canvas.scene.data.padding;\nconst paddingX = Math.ceil(width * padding / grid) * grid;\nconst paddingY = Math.ceil(height * padding / grid) * grid;\n\nawait canvas.scene.update({img: null, width: width + 2 * paddingX, height: height + 2 * paddingY, padding: 0})\nif (img) {\n  const minZ = canvas.scene.data.tiles.length ? Math.min(...canvas.scene.data.tiles.map(t => t.z)) : 0;\n  await canvas.scene.createEmbeddedEntity('Tile', {width, height, img, scale: 1, rotation: 0, locked: true, hidden: false, x: paddingX, y: paddingY, z: minZ - 1});\n}","folder":"cqjFxCW4yJ1VFA4W","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.Rpgok2vhQ4nNton4"}},"_id":"1kUiR4jFj0XuYTZp"}
{"name":"Bless","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"// new build for bless macro by Penguin#0949 with help from Kotetsushin#7680\n// version beta 4.2.0\n\n// user notes\n// this macro is inteded for use by the recipient of the bless spell in D&D 5e on Forge VTT\n// N.B. every recipient will need to use this macro independantly on their own Actor/token.\n\n//user modifiable declarations CHANGE AT YOUR OWN RISK\nconst blessIconPath = 'icons/svg/regen.svg';\nlet blessMsg = ' is Blessed!';\nlet endblessMsg = ' is no longer Blessed';\n\n//fixed declarations DO NOT MODIFY\nlet macroActor = token.actor;\nlet chatMsg = '';\nlet Blessd = macroActor.effects.find(i => i.data.label === \"Blessed\")\nlet bless = {\n    changes: [\n        {\n            key: \"data.bonuses.mwak.attack\",\n            mode: 2,\n            priority: 20,\n            value: \"+1d4\",\n        },\n        {\n            key: \"data.bonuses.rwak.attack\",\n            mode: 2,\n            priority: 20,\n            value: \"+1d4\",\n        },\n\t\t{\n            key: \"data.bonuses.msak.attack\",\n            mode: 2,\n            priority: 20,\n            value: \"+1d4\",\n        },\n\t\t{\n            key: \"data.bonuses.rsak.attack\",\n            mode: 2,\n            priority: 20,\n            value: \"+1d4\",\n        },\n\t\t{\n            key: \"data.bonuses.abilities.save\",\n            mode: 2,\n            priority: 20,\n            value: \"+1d4\",\n        },\n    ],\n    duration: {\n        seconds: 60,\n    },\n    icon: blessIconPath,\n    label: \"Blessed\"\n}\n//identify token\nif (macroActor === undefined || macroActor === null) {\n  ui.notifications.warn(\"Please select a token first.\");\n} \nelse {\n// If already bless\t\nif (Blessd) {\n    macroActor.deleteEmbeddedDocuments(\"ActiveEffect\", [Blessd.id])\n// anounce to chat\n\tchatMsg = `${macroActor.name} ${endblessMsg}`;\n}\n// if not already bless\t\nelse {\n    macroActor.createEmbeddedDocuments(\"ActiveEffect\", [bless])\t\n// anounce to chat\n\t\tchatMsg = `${macroActor.name} ${blessMsg}`;\n}\n// write to chat if needed:\nif (chatMsg !== '') {\n\tlet chatData = {\n\t\tuser: game.user._id,\n\t\tspeaker: ChatMessage.getSpeaker(),\n\t\tcontent: chatMsg\n\t};\n\tChatMessage.create(chatData, {});\n}\n}","folder":"dz7rvMlddmEBAhGn","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.foundry_community_macros.community-macros-5e.50p0yXEpxXa9aAYJ"}},"_id":"48anoyV0CQqd4y4X"}
{"name":"Heavy Armor Feat Workaround","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"//Crude but effective way to simulate Heavy Armor Master.\n//Every time the player takes eligible damage, they can just click this macro with their token selected to \"get their 3HP back.\"\n//Questions? Ask in #macro-polo on Discord. If absolutely needed, please ping Norc#5108.\n\n//Known minor limitation: Does not take into account temp HP AT ALL.\n\nfunction modifyHP(token, amount) {\n    let hp_cur = token.actor.data.data.attributes.hp.value;\n    let hp_max = token.actor.data.data.attributes.hp.max;\n    let hp_min = token.actor.data.data.attributes.hp.min;\n    hp_cur = (hp_cur+amount > hp_max) ? hp_max : hp_cur+amount;\n    hp_cur = (hp_cur < hp_min) ? hp_min : hp_cur;\n    token.actor.update({'data.attributes.hp.value': parseInt(hp_cur)});\n    return hp_cur;\n  }\n\nif(token) {\n    //Note: Just change the number after the comma to heal/receive other HP values. Negative numbers indicate damage.\n    modifyHP(token,3);\n} else {\n    ui.notifications.notify(\"Please select a token.\");\n}6","folder":"dz7rvMlddmEBAhGn","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.foundry_community_macros.community-macros-5e.Tbg9DhQqgQQZdMGZ"}},"_id":"5qMHTEWQKgXJ3H1B"}
{"name":"Monk Ki","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"/**\n * Monk Ki Point spender\n * \n * This macro will prompt which Feature you want to spend Ki points on.\n * \n * Flurry of Blows: Automatically cast two Unarmed Strike's\n * Stunning Strike: Automatically show the saving throw DC\n * Deflect Missiles: Automatically show the damage reduction\n */\n(async () => {\n    const kiName = \"Ki Points\";\n    const errNoMonkToken = \"Please select a single monk token.\";\n\n    const sendChat = async (msg) => {\n        let chatData = {\n            user: game.user.id,\n            speaker: ChatMessage.getSpeaker(),\n            content: msg,\n        };\n        ChatMessage.create(chatData, {});\n    }\n\n    if (!actor) {\n        ui.notifications.warn(errNoMonkToken);\n        return\n    }\n\n    let monk = actor.items.find(i => i.name === 'Monk' && i.type === 'class');\n    if (!monk) {\n        ui.notifications.warn(errNoMonkToken);\n        return\n    }\n\n    let monkLevels = monk.data.data.levels || 20;\n    //let subClass = monk.data.data.subclass;\n\n    if (monkLevels < 2) {\n        ui.notifications.warn('You must have a least 2 Monk levels to use ki points.');\n        return\n    }\n\n    class KiFeature {\n        /**\n         * @param {string} name\n         * @param {string} fallbackText\n         * @param {number} requireLevel\n         * @param {function} action\n         * @param {function} appendTemplate\n         * @param {number} kiCost\n         */\n        constructor(name, fallbackText, requireLevel, action, appendTemplate, kiCost) {\n            this.name = name;\n            this.fallbackText = fallbackText;\n            this.requireLevel = requireLevel;\n            this.kiCost = kiCost || 1;\n            if (action) {\n                this.action = action;\n            }\n            if (appendTemplate) {\n                this.appendTemplate = appendTemplate;\n            }\n        }\n\n        render(allowHigher) {\n            let entry = null;\n\n            const pack = game.packs.get(\"dnd5e.classfeatures\");\n            if (!pack) {\n                console.warn('Could not find \"dnd5e.classfeatures\" compendium.');\n            } else {\n                entry = pack.index.find(e => e.name === this.name);\n            }\n\n            if (!allowHigher && this.requireLevel && monkLevels && this.requireLevel > monkLevels) {\n                ui.notifications.warn(`You need to have ${this.requireLevel} monk levels, you only have ${monkLevels}.`)\n                return\n            }\n\n            if (entry) {\n                pack.getDocument(entry._id).then(o => {\n                    let template = `@Compendium[dnd5e.classfeatures.${entry._id}]{${this.name}}\n                    ${o.data.data.description.value}`;\n                    if (this.appendTemplate) {\n                        template += '\\n\\n' + this.appendTemplate();\n                    }\n                    sendChat(template);\n                    if (this.action) {\n                        this.action();\n                    }\n                });\n            } else {\n                console.warn(`Could not find \"${this.name}\" entry in compendium.`);\n                let template = this.fallbackText;\n                if (this.appendTemplate) {\n                    template += '\\n\\n' + this.appendTemplate();\n                }\n                sendChat(template);\n                if (this.action) {\n                    this.action();\n                }\n            }\n        }\n    }\n\n    const openHand = !!actor.items.find(o => o.data.name === 'Open Hand Technique') ? `<br />In addition, you can impose one of the following: <ul><li>It must succeed on a <b>Dexterity</b> saving throw or be knocked prone.</li><li>It must make a <b>Strength</b> saving throw. If it fails, you can push it up to 15 feet away from you.</li><li>It can’t take reactions until the end of your next turn.</li></ul> Saving throw <b>DC ${10 + actor.data.data.abilities.wis.mod}</b>` : \"\";\n\n    const features = [\n        new KiFeature(\"Ki: Flurry of Blows\",\n            `Immediately after you take the <b>Attack</b> action on your turn, you can spend 1 ki point to make two unarmed strikes as a bonus action. ${openHand}`,\n            2,\n            function () {\n                // Automatically roll two Unarmed Strike attacks\n                let strike = actor.items.find(o => o.data.name === 'Unarmed Strike' && o.labels.activation === '1 Action')\n                if (strike) {\n                    strike.roll();\n                    strike.roll();\n                }\n            }),\n        new KiFeature(\"Ki: Patient Defense\",\n            \"You can spend 1 ki point to take the <b>Dodge</b> action as a bonus action on your turn.\",\n            2),\n        new KiFeature(\"Ki: Step of the Wind\",\n            \"You can spend 1 ki point to take the <b>Disengage</b> or <b>Dash</b> action as a bonus action on your turn, and your jump distance is doubled for the turn.\",\n            2),\n        new KiFeature(\"Deflect Missiles\",\n            `Starting at 3rd level, you can use your reaction to deflect or catch the missile when you are hit by a ranged weapon attack. When you do so, the damage you take from the attack is reduced by 1d10 + your Dexterity modifier + your monk level. <br />\n\n        If you reduce the damage to 0, you can catch the missile if it is small enough for you to hold in one hand and you have at least one hand free. If you catch a missile in this way, you can spend 1 ki point to make a ranged attack with the weapon or piece of ammunition you just caught, as part of the same reaction. You make this attack with proficiency, regardless of your weapon proficiencies, and the missile counts as a monk weapon for the attack, which has a normal range of 20 feet and a long range of 60 feet.`,\n            3,\n            null,\n            function () {\n                return `Damage reduction: [[/r 1d10+${actor.data.data.abilities.dex.mod}+${monkLevels}]]`;\n            }),\n        new KiFeature(\"Ki: Stunning Strike\",\n            \"Starting at 5th level, you can interfere with the flow of ki in an opponent’s body. When you hit another creature with a melee weapon attack, you can spend 1 ki point to attempt a stunning strike. The target must succeed on a Constitution saving throw or be <b>stunned</b> until the end of your next turn.\",\n            5,\n            null,\n            function () {\n                // Append the saving throw DC to the chat message\n                return `CON saving throw (DC [[8+${actor.data.data.abilities.wis.mod}+@attributes.prof]])`;\n            }),\n        new KiFeature(\"Ki: Diamond Soul\",\n            `Beginning at 14th level, your mastery of ki grants you proficiency in all saving throws.\n\n        Additionally, whenever you make a saving throw and fail, you can spend 1 ki point to reroll it and take the second result.`,\n            14),\n        new KiFeature(\"Ki: Empty Body\",\n            `Beginning at 18th level, you can use your action to spend 4 ki points to become invisible for 1 minute. During that time, you also have resistance to all damage but force damage.\n\n        Additionally, you can spend 8 ki points to cast the astral projection spell, without needing material components. When you do so, you can’t take any other creatures with you.`,\n            18,\n            null,\n            function () {\n                return \"Note: 4 ki points have been spent. Adjust manually if casting astral projection spell.\";\n            },\n            4),\n    ];\n\n    const consumeKi = (feature, allowNegative, allowHigher) => {\n        let hasAvailableResource = false;\n        let selected = features.find(o => o.name == feature);\n        let kiCost = selected.kiCost || 1;\n\n        // Look for Resources under the Core actor data\n        let resourceKey = Object.keys(actor.data.data.resources).filter(k => actor.data.data.resources[k].label === kiName).shift();\n        if (resourceKey && (actor.data.data.resources[resourceKey].value >= kiCost || allowNegative)) {\n            hasAvailableResource = true;\n            actor.data.data.resources[resourceKey].value -= kiCost;\n        }\n\n        // Look for Ki Points Feat that has uses\n        actor.items.filter(i => i.data.name === kiName && i.hasLimitedUses && (i.data.data.uses.value >= kiCost || allowNegative)).forEach(i => {\n            hasAvailableResource = true;\n            i.data.data.uses.value -= kiCost\n        })\n\n        if (!hasAvailableResource) {\n            ui.notifications.warn(`${actor.name} does not have any ${kiName} left!`);\n            return false;\n        }\n        if (actor.sheet.rendered) {\n            // Update the actor sheet if it is currently open\n            actor.render(true);\n        }\n\n        if (selected) {\n            selected.render(allowHigher);\n        }\n\n        return true;\n    };\n\n    (async () => {\n        let template = `\n        <form>\n            <div class=\"form-group\">\n                <label>Select feature:</label>\n                <select id=\"feature\" name=\"feature\">`\n        features.filter(o => o.requireLevel <= monkLevels).forEach(o => {\n            template += `<option value=\"${o.name}\">${o.name}</option>`;\n        });\n        template += `</select>\n            </div>\n            <div class=\"form-group\">\n                <label>Allow consuming Ki into negative? <input type=\"checkbox\" id=\"allow-negative\" name=\"allow-negative\" value=\"1\"></label>\n            </div>\n            <div class=\"form-group\">\n                <label>Allow consuming Ki feats of higher level? <input type=\"checkbox\" id=\"allow-higher\" name=\"allow-higher\" value=\"1\"></label>\n            </div>\n        </form>`;\n        new Dialog({\n            title: `Monk Ki Point Spender`,\n            content: template,\n            buttons: {\n                yes: {\n                    icon: \"<i class='fas fa-check'></i>\",\n                    label: `Apply`,\n                    callback: (html) => {\n                        let feature = html.find('#feature')[0].value;\n                        let allowNegative = html.find('#allow-negative')[0].checked;\n                        let allowHigher = html.find('#allow-higher')[0].checked;\n                        consumeKi(feature, allowNegative, allowHigher);\n                    }\n                },\n                no: {\n                    icon: \"<i class='fas fa-times'></i>\",\n                    label: `Cancel`\n                },\n            },\n            default: \"yes\"\n        }).render(true);\n    })();\n})()","folder":"dz7rvMlddmEBAhGn","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.foundry_community_macros.community-macros-5e.WC2Yl843kA4sjrUz"}},"_id":"5uBLc2fxWgcwWEQ6"}
{"name":"Change Token Vision","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"// Open a dialog for quickly changing token vision parameters of the controlled tokens.\n// This macro was written by @Sky#9453\n// https://github.com/Sky-Captain-13/foundry\n\nif (canvas.tokens.controlled.length === 0)\n  return ui.notifications.error(\"Please select a token first\");\n\nlet applyChanges = false;\nnew Dialog({\n  title: `Token Vision Configuration`,\n  content: `\n    <form>\n      <div class=\"form-group\">\n        <label>Vision Type:</label>\n        <select id=\"vision-type\" name=\"vision-type\">\n          <option value=\"nochange\">No Change</option>\n          <option value=\"dim0\">Self</option>\n          <option value=\"dim30\">Darkvision (30 ft)</option>\n          <option value=\"dim60\">Darkvision (60 ft)</option>\n          <option value=\"dim90\">Darkvision (90 ft)</option>\n          <option value=\"dim120\">Darkvision (120 ft)</option>\n          <option value=\"dim150\">Darkvision (150 ft)</option>\n          <option value=\"dim180\">Darkvision (180 ft)</option>\n          <option value=\"bright120\">Devil's Sight (Warlock)</option>\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Light Source:</label>\n        <select id=\"light-source\" name=\"light-source\">\n          <option value=\"nochange\">No Change</option>\n          <option value=\"none\">None</option>\n          <option value=\"candle\">Candle</option>\n          <option value=\"lamp\">Lamp</option>\n          <option value=\"bullseye\">Lantern (Bullseye)</option>\n          <option value=\"hooded-dim\">Lantern (Hooded - Dim)</option>\n          <option value=\"hooded-bright\">Lantern (Hooded - Bright)</option>\n          <option value=\"light\">Light (Cantrip)</option>\n          <option value=\"torch\">Torch</option>\n        </select>\n      </div>\n    </form>\n    `,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply Changes`,\n      callback: () => applyChanges = true\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel Changes`\n    },\n  },\n  default: \"yes\",\n  close: html => {\n    if (applyChanges) {\n      for ( let token of canvas.tokens.controlled ) {\n        let visionType = html.find('[name=\"vision-type\"]')[0].value || \"none\";\n        let lightSource = html.find('[name=\"light-source\"]')[0].value || \"none\";\n        let dimSight = 0;\n        let brightSight = 0;\n        let dimLight = 0;\n        let brightLight = 0;\n        let lightAngle = 360;\n        let lockRotation = token.data.lockRotation;\n        // Get Vision Type Values\n        switch (visionType) {\n          case \"dim0\":\n            dimSight = 0;\n            brightSight = 0;\n            break;\n          case \"dim30\":\n            dimSight = 30;\n            brightSight = 0;\n            break;\n          case \"dim60\":\n            dimSight = 60;\n            brightSight = 0;\n            break;\n          case \"dim90\":\n            dimSight = 90;\n            brightSight = 0;\n            break;\n          case \"dim120\":\n            dimSight = 120;\n            brightSight = 0;\n            break;\n          case \"dim150\":\n            dimSight = 150;\n            brightSight = 0;\n            break;\n          case \"dim180\":\n            dimSight = 180;\n            brightSight = 0;\n            break;\n          case \"bright120\":\n            dimSight = 0;\n            brightSight= 120;\n            break;\n          case \"nochange\":\n          default:\n            dimSight = token.data.dimSight;\n            brightSight = token.data.brightSight;\n        }\n        // Get Light Source Values\n        switch (lightSource) {\n          case \"none\":\n            dimLight = 0;\n            brightLight = 0;\n            break;\n          case \"candle\":\n            dimLight = 10;\n            brightLight = 5;\n            break;\n          case \"lamp\":\n            dimLight = 45;\n            brightLight = 15;\n            break;\n          case \"bullseye\":\n            dimLight = 120;\n            brightLight = 60;\n            lockRotation = false;\n            lightAngle = 52.5;\n            break;\n          case \"hooded-dim\":\n            dimLight = 5;\n            brightLight = 0;\n            break;\n          case \"hooded-bright\":\n            dimLight = 60;\n            brightLight = 30;\n            break;\n          case \"light\":\n            dimLight = 40;\n            brightLight = 20;\n            break;\n          case \"torch\":\n            dimLight = 40;\n            brightLight = 20;\n            break;\n          case \"nochange\":\n          default:\n            dimLight = token.data.dimLight;\n            brightLight = token.data.brightLight;\n            lightAngle = token.data.lightAngle;\n            lockRotation = token.data.lockRotation;\n        }\n        // Update Token\n        console.log(token);\n        token.document.update({\n          vision: true,\n          dimSight: dimSight,\n          brightSight: brightSight,\n          light:{\n               dim: dimLight,\n               bright:  brightLight\n          },\n          lightAngle: lightAngle,\n          lockRotation: lockRotation\n        });\n      }\n    }\n  }\n}).render(true);","folder":"cqjFxCW4yJ1VFA4W","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.advanced-macros.macros.zEOWQFblsTskw7jX"}},"_id":"7qwIfUNXvdEwEgGS"}
{"name":"Tasha's Mind Whip","type":"script","author":"KARN3p52v6JiwmsL","img":"systems/dnd5e/icons/spells/link-blue-3.jpg","scope":"global","command":"game.dnd5e.rollItemMacro(\"Tasha's Mind Whip\");","folder":null,"sort":0,"permission":{"default":0,"KARN3p52v6JiwmsL":3},"flags":{"dnd5e":{"itemMacro":true}},"_id":"9KEvq60fiPTEgLLa"}
{"name":"Show Toolbox","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/modules/data-toolbox/assets/icons/toolbox.png","scope":"global","command":"dtShowToolbox();","folder":"dqhqDwoyw8q7Tapn","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.data-toolbox.data-macros.6dPmx5EELee0g2jS"}},"_id":"ApAS9FXQQi652i8c"}
{"name":"Battered Longsword, +1","type":"script","author":"kWLIh1kcIRnPhwZQ","img":"https://assets.forge-vtt.com/622ba65aca4b762b8e414851/ddb-images/other/item-Weapon.jpg","scope":"global","command":"game.dnd5e.rollItemMacro(\"Battered Longsword, +1\");","folder":null,"sort":0,"permission":{"default":0,"kWLIh1kcIRnPhwZQ":3},"flags":{"dnd5e":{"itemMacro":true}},"_id":"AqbwAfk4JfReSIqN"}
{"name":"Restore token creation","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"// This will restore your ability (if your player role had it) to drop actors onto a scene to create new tokens.\r\n// This is the complement for the \"Disallow token creation\" macro.\r\n\r\nif (game.disallow_token_creation_id) Hooks.off('preCreateToken', game.disallow_token_creation_id);\r\ngame.disallow_token_creation_id= 0;","folder":"cqjFxCW4yJ1VFA4W","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.advanced-macros.macros.T39hRCH2Ozk4oUZU"}},"_id":"BRJmRQDU2VcIwIui"}
{"name":"teleport","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"// This macro only serves as an example. For a proper teleportation macro, check out the Dynamic Effects module.\r\n//\r\n// This macro requires the advanced macros of Furnace\r\n// This macro depends on /move-token\r\n// Takes X and Y as arguments\r\n\r\nconst macro = game.macros.getName(\"move-token\");\r\nif (!macro) {\r\n  ui.notifications.error(\"This macro depends on the 'move-token' macro, which could not be found.\");\r\n  return;\r\n}\r\nmacro.execute(args[0], args[1], true);","folder":"cqjFxCW4yJ1VFA4W","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.advanced-macros.macros.4aUMx41pvnZCJ52b"}},"_id":"DUbkFGc1wM0sdUGE"}
{"name":"roll-skill","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"/* This macro requires the advanced macros of Furnace and the LMRTFY module, v0.7+\r\n * This will request a skill check for the currently selected player using LMRTFY roll request dialog\r\n * Takes the skill as its first argument, or if not set, requests all\r\n * Example: /roll-skill \"prc\"\r\n */\r\n\r\nconst skill = args[0] || Object.keys(CONFIG.DND5E.skills);\r\nif (!actor) return;\r\nLMRTFYRoller.requestSkillChecks(actor, skill);","folder":"cqjFxCW4yJ1VFA4W","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.advanced-macros.macros.Ns2y2EcwosuZOwtu"}},"_id":"EICyIWrYJFX5orvs"}
{"name":"Guidance","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"// new build for guidance macro by Mr.White and Penguin#0949 and with no help all of Kotetsushin#7680 trust me \n// version beta 4.2.0\n\n// user notes\n// this macro is inteded for use by the recipient of the bless spell in D&D 5e on Forge VTT\n// N.B. every recipient will need to use this macro independantly on their own Actor/token.\n\n//user modifiable declarations CHANGE AT YOUR OWN RISK\nconst GuidIconPath = 'icons/svg/windmill.svg';\nlet GuideMsg = ' is guided!';\nlet endGuideMsg = ' is no longer guided.';\n\n//fixed declarations DO NOT MODIFY\nlet chatMsg = '';\nlet macroActor = token.actor;\nlet Guided = macroActor.effects.find(i => i.data.label === \"Guided\")\nlet Guide = {\n    changes: [\n        {\n            key: \"data.bonuses.abilities.check\",\n            mode: 2,\n            priority: 20,\n            value: \"+1d4\",\n        },\n    ],\n    duration: {\n        seconds: 60,\n    },\n    icon: GuidIconPath,\n    label: \"Guided\"\n}\n//identify token\nif (macroActor === undefined || macroActor === null) {\n    ui.notifications.warn(\"Please select a token first.\");\n}\nelse {\n// If already guided\t\n    if (Guided) {\n        macroActor.deleteEmbeddedDocuments(\"ActiveEffect\", [Guided.id]);\n        // anounce to chat\n        chatMsg = `${macroActor.name} ${endGuideMsg}`;\n    }\n    // if not already guided\t\n    else {\n        macroActor.createEmbeddedDocuments(\"ActiveEffect\", [Guide]);\n        // anounce to chat\n        chatMsg = `${macroActor.name} ${GuideMsg}`;\n    }\n    // write to chat if needed:\n    if (chatMsg !== '') {\n        let chatData = {\n            user: game.user._id,\n            speaker: ChatMessage.getSpeaker(),\n            content: chatMsg\n        };\n        ChatMessage.create(chatData, {});\n    }\n}","folder":"dz7rvMlddmEBAhGn","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.foundry_community_macros.community-macros-5e.GlWj7z7p2V4JKXMx"}},"_id":"GGmfagCA1kc2RsSx"}
{"name":"Apply Damage","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"// Displays a prompt which asks for an amount of damage to inflict\n// Inflicts the input damage amount to all selected tokens\n\nlet content = `\n  <form>\n    <div class=\"form-group\">\n      <label for=\"id=\"damage-amount\">Damage</label>\n      <input id=\"damage-amount\" type=\"number\" name=\"inputField\" autofocus>\n    </div>\n  </form>`\n\nnew Dialog({\n  title: 'How much damage should be applied (negative for healing)?',\n  content: content,\n  buttons:{\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply Damage`\n    }\n  },\n\n  default:'yes',\n\n  close: html => {\n    let result = html.find('input[name=\\'inputField\\']');\n    if (result.val() !== '') {\n      let damage = result.val();\n      let allSelected = canvas.tokens.controlled\n\n      allSelected.forEach(selected => {\n        let actor = selected.actor\n        let hp = actor.data.data.attributes.hp.value\n        let maxHp = actor.data.data.attributes.hp.max\n\n        let updatedHp = damage > hp ? 0 : hp - damage\n\n        actor.update({'data.attributes.hp.value': updatedHp > maxHp ? maxHp : updatedHp})\n\n        console.log(actor)\n      })\n    }\n  }\n}).render(true);\n\n(async () => {\nawait new Promise(resolve => setTimeout(resolve, 20));\nlet input = $('#damage-amount').focus();\n})();","folder":"dz7rvMlddmEBAhGn","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Macro.7K3qCHAU5AW5TiP4"}},"_id":"HKqtjZTZLdF3B1fu"}
{"name":"Tool Proficiency","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"/**\n * Grab a list of tools in the selected player's inventory, then all the user to make a roll on the tool.\n * Will take into consideration if the player is proficient in using the tool.\n */\n\n// get the first entry from the array of currently selected tokens. Works best/exclusively with one selected token\nconst target = canvas.tokens.controlled[0].actor;\n// get the abilities of the selected token for ease of access later\nconst { abilities } = target.data.data;\n// Only items set as \"tools\" will be included!\n// get all held and equipped Tools/Kits/Supplies. Might want to replace with /[tT]ools|[kK]it|[sS]upplies|[sS]et$/ if gaming sets should be included\nconst toolsInInventory = target.items.filter( item => item.name.match(/[tT]ools|[kK]it|[sS]upplies$/) && item.data.data.hasOwnProperty(\"proficient\"));\n// const toolProficiencies = target.data.data.traits.toolProf; // Tools have proficiency mod in the object under <item>.data.data.proficient. \nlet tool = undefined;\n\n// Choose ability mod dialog\nconst abilityDialog = (async () => {\n    let template = `\n    <div>\n        <div class=\"form-group\">\n            <label>Choose ability</label>\n            <select id=\"selectedAbility\">`\n    for (let ability in abilities) {\n        switch (ability) {\n            case \"str\":\n                abilities[ability].name = \"Strength\"\n                break;\n            case \"dex\":\n                abilities[ability].name = \"Dexterity\"\n                break;\n            case \"con\":\n                abilities[ability].name = \"Constitution\"\n                break;\n            case \"int\":\n                abilities[ability].name = \"Intelligence\"\n                break;\n            case \"wis\":\n                abilities[ability].name = \"Wisdom\"\n                break;\n            case \"cha\":\n                abilities[ability].name = \"Charisma\"\n                break;\n            default:\n                console.log(\"something went wrong\");\n        }\n        template += `<option value=\"${ability}\">${abilities[ability].name} (${abilities[ability].value})</option>`;\n    }\n    template += `</select>\n        </div>\n    </div>`\n\n\n    new Dialog({\n        title: tool.name,\n        content: template,\n        buttons: {\n            ok: {\n                icon: '<i class=\"fas fa-check\"></i>',\n                label: \"OK\",\n                callback: async (html) => {\n                    const selection = html.find(\"#selectedAbility\")[0].value;\n                    console.log(tool, target);\n                    let prof = tool.data.data.proficient * target.data.data.attributes.prof; // target might be half or doubly proficient. This will make sure it is accounted for\n\n                    let messageContent = `${target.name} rolled a <b>[[1d20+${abilities[selection].mod}(${abilities[selection].name})+${prof}(Proficiency)]]</b> for the ${tool.name} check.<br>`;\n                    let chatData = {\n                        user: game.user.id,\n                        speaker: ChatMessage.getSpeaker(),\n                        content: messageContent,\n                        // uncomment the line below to always whisper the roll to the GM\n                        // whisper: game.users.filter(u => u.isGM).map(u => u._id)\n                    };\n                    ChatMessage.create(chatData, {});\n               }\n            },\n            cancel: {\n                icon: '<i class=\"fas fa-times\"></i>',\n                label: 'Cancel'\n            }\n        },\n        default: \"cancel\"\n    }).render(true);\n})\n\n// Choose tool dialog\nif (toolsInInventory.length) {\n    (async () => {\n        let template = `\n        <div>\n            <div class=\"form-group\">\n                <label>Choose a tool</label>\n                <select id=\"selectedTool\">`\n        toolsInInventory.forEach( tempTool => {    \n            template += `<option value=\"${tempTool.name}\">${tempTool.name}</option>`;\n        });\n        template += `</select>\n            </div>\n        </div>`;\n\n        new Dialog({\n            title: 'Which tool?',\n            content: template,\n            buttons: {\n                ok: {\n                    icon: '<i class=\"fas fa-check\"></i>',\n                    label: \"OK\",\n                    callback: async (html) => {\n                        let selection = html.find(\"#selectedTool\")[0].value;\n                        tool = toolsInInventory.find( item => item.name === selection )\n                        abilityDialog();\n                   }\n                },\n                cancel: {\n                    icon: '<i class=\"fas fa-times\"></i>',\n                    label: 'Cancel'\n                }\n            },\n            default: \"cancel\"\n        }).render(true);\n    })()    \n}\n\nelse {\n    new Dialog({\n        title: 'No Tools!',\n        content: '<p>You don\\'t seem to have any tool with you.</p>',\n        buttons: {\n            ok: {\n                icon: '<i class=\"fas fa-check\"></i>',\n                label: \"OK\"\n            }\n        },\n        default: \"ok\"\n    }).render(true);\n}","folder":"dz7rvMlddmEBAhGn","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.foundry_community_macros.community-macros-5e.vwfOm1Z1kY4EZS1G"}},"_id":"HWMc0cGelsq9S3UT"}
{"name":"Measure Token Distances","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"// This macro will measure the distance between the selected tokens\r\n// and every targetted tokens within a scene.\r\n// It will then output the measured distances to the chat\r\n// If called with an argument, determines who to whisper the message to,\r\n// otherwise sends it as a public message\r\n\r\nlet message = \"\"\r\nfor (let token of canvas.tokens.controlled) {\r\n   let ruler = canvas.controls.ruler;\r\n   for (let target of game.user.targets) {\r\n       ruler.clear()\r\n       ruler.waypoints.push(token.center)\r\n       ruler.labels.addChild(new PIXI.Text(\"\"));\r\n       ruler.measure(target.center);\r\n       let distance = ruler.labels.children[0].text;\r\n       message += `From '${token.name}' to '${target.name}' : ${distance}<br/>`\r\n       ruler.clear();\r\n   }\r\n}\r\nif (message) {\r\n   const whisper = args[0] ? ChatMessage.getWhisperIDs(args[0]) : undefined;\r\n   ChatMessage.create({content: message, whisper});\r\n}","folder":"cqjFxCW4yJ1VFA4W","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Compendium.advanced-macros.macros.CRaAk3V9gF6ihk1P"}},"_id":"HjdYXP49jyAhiTHm"}
{"name":"All Token’s Passive Perception","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"// Pull the passive perception of each token in the current scene and whisper the results to the GM.\n// Only tested with the 5e System in Foundry.\n// Author: @Drunemeton#7955. Based on the original macro by author @Erogroth#7134.\n\n// Initalize variables.\nlet pcArray = [];\nlet npcArray = [];\nlet messageContentPC = \"\";\nlet messageContentNPC = \"\";\nlet messageHeaderPC = \"<b>PC Passive Perception</b><br>\";\nlet messageHeaderNPC = \"<b>NPC Passive Perception</b><br>\";\n\n// Gather tokens in the current scene into an array.\nlet tokens = canvas.tokens.placeables.filter((token) => token.data && token.actor);\n\n// From the tokens array sort into PC and NPC arrays.\nfor (let count of tokens) {\n  let tokenType = count.actor.data.type;\n  let tokenName = count.data.name;\n  let tokenPassive = count.actor.data.data.skills.prc.passive;\n  \n  if(tokenType === \"character\") {\n    pcArray.push({ name: tokenName, passive: tokenPassive });\n  } \n  if(tokenType === \"npc\") {\n    npcArray.push({ name: tokenName, passive: tokenPassive });\n  }\n}\n\n// Sort each array.\nsortArray(pcArray);\nsortArray(npcArray);\n\n// Build chat message, with PCs first, then NPCs.\nfor (let numPC of pcArray) {\n  messageContentPC += `${numPC.name}: <b>${numPC.passive}</b><br>`;\n}\nfor (let numNPC of npcArray) {\n  messageContentNPC += `${numNPC.name}: <b>${numNPC.passive}</b><br>`;\n}\n\nlet chatMessage = (messageHeaderPC + messageContentPC + `<br>` + messageHeaderNPC + messageContentNPC);\n\nlet chatData = {\n  user: game.user._id,\n  speaker: ChatMessage.getSpeaker(),\n  content: chatMessage,\n  whisper: game.users.filter((u) => u.isGM).map((u) => u._id),\n};\n\n// Display chat message.\nChatMessage.create(chatData, {});\n\n// Sort each array by Name.\n  function sortArray(checkArray) {\n    checkArray.sort(function (a, b) {\n      var nameA = a.name.toUpperCase(); // ignore upper and lowercase\n      var nameB = b.name.toUpperCase(); // ignore upper and lowercase\n      if (nameA < nameB) {\n        return -1;\n      }\n      if (nameA > nameB) {\n        return 1;\n      }\n      // names must be equal\n      return 0;\n    });\n\n    // Sort array by Passive Perception.\n    checkArray.sort(function (a, b) {\n      return b.passive - a.passive;\n    });\n  }","folder":"dz7rvMlddmEBAhGn","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.foundry_community_macros.community-macros-5e.DBlk2wFOpxxhM9eC"}},"_id":"Hjoqwx3j59gg9z9A"}
{"name":"toggle-playlist-sound","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"/* This macro requires the advanced macros of Furnace and Playlist QoL\r\n * This will toggle the playing state of a sound in your playlists\r\n * Takes the playlist name as first argument, and the sound name as second argument \r\n * Example: /toggle-playlist-sound \"SFX\" \"Sword Clash\"\r\n */\r\n\r\nFurnacePlaylistQoL.PlaySound(args[0], args[1]);","folder":"cqjFxCW4yJ1VFA4W","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.advanced-macros.macros.23kTIYmN7vqvmjF5"}},"_id":"JT5rnaeNVurheBtN"}
{"name":"move-token","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"/* This macro requires the advanced macros of Furnace\r\n * This will move the selected token to the designated position\r\n * Takes X and Y as arguments for the position (in pixels)\r\n * A third, optional, argument, if set to true, will disable the movement animation\r\n * Example: /move-token 1000 1500 false\r\n */\r\n\r\nconst x = args[0];\r\nconst y = args[1];\r\nconst noAnimate = args[2];\r\n\r\nif (!token) return;\r\nif (noAnimate) token._noAnimate = true;\r\nawait token.document.update({x, y})\r\ntoken._noAnimate = false;","folder":"cqjFxCW4yJ1VFA4W","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.advanced-macros.macros.rMOgmYRkV0AZ1sjc"}},"_id":"Lh57bQ1RNj91y7Wc"}
{"name":"Lay On Hands","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"/**\n * System: D&D5e\n * Apply lay-on-hands feat to a target character.  Asks the player how many HP to heal and\n * verifies the entered value is within range before marking down usage counter. If the player\n * has OWNER permissions of target (such as GM or self-heal) the HP are applied automatically; \n * otherwise, a 'roll' message appears allowing the target character to right-click to apply healing.\n */\n\n(async () => {\n\nconst layName = \"Lay on Hands\";\nlet confirmed = false;\nlet actorData = actor || canvas.tokens.controlled[0] || game.user.character;\nlet featData = actorData ? actorData.items.find(i => i.name===layName) : null;\n\nif(actorData == null || featData == null) \n    ui.notifications.warn(`Selected hero must have ${layName} feat.`);\nelse if (game.user.targets.size !== 1)\n    ui.notifications.warn(`Please target one token.`);\nelse\n{\n    let featUpdate = duplicate(featData);\n    let targetActor = game.user.targets.values().next().value.actor;\n    let maxHeal = Math.clamped(featUpdate.data.uses.value, 0, \n        targetActor.data.data.attributes.hp.max - targetActor.data.data.attributes.hp.value);\n\n    let content = `<p><em>${actorData.name} lays hands on ${targetActor.data.name}.</em></p>\n                    <p>How many HP do you want to restore to ${targetActor.data.name}?</p>\n                    <form>\n                        <div class=\"form-group\">\n                            <label for=\"num\">HP to Restore: (Max = ${maxHeal})</label>\n                            <input id=\"num\" name=\"num\" type=\"number\" min=\"0\" max=\"${maxHeal}\"></input>\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"flavor\">Flavor:</label>\n                            <input id=\"flavor\" name=\"flavor\" value=\"${featUpdate.data.chatFlavor}\"></input>\n                        </div>\n                    </form>`;\n    new Dialog({\n        title: \"Lay on Hands Healing\",\n        content: content,      \n        buttons: {\n            heal: { label: \"Heal!\", callback: () => confirmed = true },\n            cancel: { label: \"Cancel\", callback: () => confirmed = false }\n        },\n        default: \"heal\",\n\n        close: html => {\n            (async () => {\n            if (confirmed) \n            {\n                let number = Math.floor(Number(html.find('#num')[0].value));\n                if (number < 1 || number > maxHeal)\n                    ui.notifications.warn(`Invalid number of charges entered = ${number}. Aborting action.`);\n                else\n                {\n                    let flavor = `<strong>${html.find('#flavor')[0].value}</strong><br>`;\n                    if (targetActor.permission !== CONST.ENTITY_PERMISSIONS.OWNER)\n                        // We need help applying the healing, so make a roll message for right-click convenience.\n                        await new Roll(`${number}`).toMessage({\n                            speaker: ChatMessage.getSpeaker(),\n                            flavor: `${actorData.name} lays hands on ${targetActor.data.name}.<br>${flavor}\n                            <p><em>Manually apply ${number} HP of healing to ${targetActor.data.name}</em></p>` });\n                    else {\n                        // We can apply healing automatically, so just show a normal chat message.\n                        ChatMessage.create({\n                            speaker: ChatMessage.getSpeaker(),\n                            content: `${actorData.name} lays hands on ${targetActor.data.name} for ${number} HP.<br>${flavor}`\n                        });\n                        await targetActor.update({\"data.attributes.hp.value\" : targetActor.data.data.attributes.hp.value + number});\n                    }\n                     \n                    //Update the value under \"Features\"\n                    featUpdate.data.uses.value = featUpdate.data.uses.value - number;\n                    await actorData.items.getName(layName).update({ \"data.uses.value\" : featUpdate.data.uses.value });\n\n                    //Update resource counter only if the \"Lay on Hands\" feature is set to consume it\n                    let resString = featUpdate.data.consume.target;\n                    if(resString.indexOf('resources') >= 0) {\n                       await actorData.update({\n                           data: { [featUpdate.data.consume.target] : featUpdate.data.uses.value }\n                       });\n                    }\n\n                    if (actorData.sheet.rendered) {\n                       // Update the actor sheet if it is currently open\n                       await actorData.render(true);\n                    }\n                };\n            }\n            })();\n        }\n    }).render(true);\n}\n})();","folder":"dz7rvMlddmEBAhGn","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.foundry_community_macros.community-macros-5e.WhAe42txHIkeZk2s"}},"_id":"MaZmpHu7soPLGEps"}
{"name":"Wild Magic","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"function printMessage(message){\n        let chatData = {\n                user : game.user.id,\n                content : message,\n                blind: true,\n                whisper : game.users.filter(u => u.isGM).map(u => u.id)\n        };\n\n        ChatMessage.create(chatData,{});        \n}\n\n\nconst roll = new Roll(`1d20`);\nlet result = await roll.roll();\n\nif (result.total == 1) {\n    printMessage('<p style=\"color:red;\">Wild magic has been triggered.</p>');\n}\nelse{\n    printMessage(\"Wild magic was not triggered on a \" + result.total);\n}","folder":"dz7rvMlddmEBAhGn","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Macro.EQcDS69pG3R7vQhL"}},"_id":"NTOheWRvtsFR1F29"}
{"name":"Canvas Always-on-top","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"const video = $(`<video id='pip-video' autoplay='autoplay' onplay='this.requestPictureInPicture()'></video>`)[0];\nvideo.srcObject = $(\"#board\")[0].captureStream();\nconst playVideo = () => {\n   if (video.readyState < 2) setTimeout(playVideo, 0);\n   else video.play();\n};\nplayVideo();","folder":"cqjFxCW4yJ1VFA4W","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.tHqyy0sqn6mHlV0m"}},"_id":"QUT5MjJmBnnMBA8g"}
{"name":"Bardic Insperation","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"let bardinsp_data = null;\n\n//Check if have Bardic Insperation\n\nif (canvas.tokens.controlled.length == 1){\n\t//console.log(canvas.tokens.controlled);\n\tlet owner_actor = canvas.tokens.controlled[0].actor;\n\n\tfor (let item in owner_actor.data.items){\n\t\tif (item.name == \"Bardic Inspiration\"){\n\t\t\tbardinsp_data = item;\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\n//Get the Target of Bardic Insperation\nif (canvas.tokens._hover != null){\n\tlet bardinsp_token = canvas.tokens._hover;\n\n\n\tconst effect = bardinsp_token.actor.effects.entries;\n\n\tbardinsp_token.toggleEffect(\"systems/dnd5e/icons/skills/yellow_08.jpg\");\n}","folder":"dz7rvMlddmEBAhGn","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Macro.4Sdc0USpaZSuNJP7"}},"_id":"SwVQiVRgrxukscED"}
{"name":"Random Inspiration","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"// Courtesy of @Zarek\n// Selected target receives a random inspiration from a table called \"inspirations\".\n// You can find a table called inspirations in the community tables module\n\n// Setup variables\nlet tableName = \"Inspirations\";\n\nlet bardicInspiration = async() => {\n  if (!actor) {\n    ui.notifications.warn(\"You must have an actor selected.\");\n    return\n  }\n\n  // Get Targets name\n  let actorLevels = actor.data.data.levels || 1;\n  const targetId = game.user.targets.ids[0];\n  const targetToken = canvas.tokens.get(targetId);\n  if (!targetToken) {\n    ui.notifications.warn(\"You must target a token.\");\n    return\n  }\n  const targetName = targetToken.name;\n\n\n  let table = game.tables.contents.find(t => t.name == tableName);\n\n  //default inspiration if no table is found.\n  //let inspiration = \"Cowards die many times before their deaths; the valiant never taste death but once.\";\n  let inspiration = `I don't know what effect ${targetName} will have upon the enemy, but, by God, he terrifies me.`;\n  \n  // Roll the result, and mark it drawn\n  if (table) {\n    if (checkTable(table)) {\n      // let result = table.roll()[1];\n      let roll = await table.roll();\n      let result = roll.results[0];\n      inspiration = result.data.text;\n      await table.updateEmbeddedDocuments(\"TableResult\", [{\n        _id: result.id,\n        drawn: true\n      }]);\n    }\n  }\n\n  function checkTable(table) {\n    let results = 0;\n    for (let data of table.data.results) {\n      if (!data.drawn) {\n        results++;\n      }\n    }\n    if (results < 1) {\n      table.reset();\n      ui.notifications.notify(\"Table Reset\")\n      return false\n    }\n    return true\n  }\n\n  let dieType = 'd6';\n  if (actorLevels >= 15) {\n    dieType = 'd12';\n  } else if (actorLevels >= 10) {\n    dieType = 'd10';\n  } else if (actorLevels >= 5) {\n    dieType = 'd8';\n  }\n\n  let messageContent = '';\n  messageContent += `<p>${token.name} exclaims <b><i>\"${inspiration}\"</i></b></p>`\n  messageContent += `<p>${targetName} is inspired.</p>`\n  messageContent += `<details closed=\"\"><summary><a>Bardic Inspiration</a></summary><p>${targetName} gains one Bardic Inspiration die, a <strong>${dieType}</strong>.<br>Once within the next 10 minutes, ${targetName} can roll the die and add the number rolled to one <b>ability check, attack roll, or saving throw</b>. ${targetName} can wait until after it rolls the <strong>d20</strong> before deciding to use the Bardic Inspiration die, but must decide before the DM says whether the roll succeeds or fails. Once the Bardic Inspiration die is rolled, it is lost.</p></details>`\n\n  // create the message\n  if (messageContent !== '') {\n    let chatData = {\n      user: game.user.id,\n      speaker: ChatMessage.getSpeaker(),\n      content: messageContent,\n    };\n    ChatMessage.create(chatData, {});\n  }\n};\nbardicInspiration();","folder":"dz7rvMlddmEBAhGn","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.foundry_community_macros.community-macros-5e.XuT5kNbIerT7CGoA"}},"_id":"UpXZyEnGIER6uOSU"}
{"name":"Random Mockeries","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"// Courtesy of @Zarek\n// Selected target receives a random mockery from a table called \"mockeries\" along with the DC and damage.\n// You can find a table called mockeries in the community tables module.\n\n\nlet tableName = \"mockeries\";\n// default mockery if no table found.\nlet mockery = \"Now go away or I shall taunt you a second time-a!\";\n\nlet viciousMockeries = async () => {\n  if (!actor) {\n    ui.notifications.warn(\"You must have an actor selected.\");\n    return\n  }\n\n  let actorLevels = actor.data.data.levels || 1;\n  let table = game.tables.contents.find(t => t.name == tableName);\n\n  // Get Targets name\n  const targetId = game.user.targets.ids[0];\n  const targetToken = canvas.tokens.get(targetId);\n  if (!targetToken) {\n    ui.notifications.warn(\"You must target a token.\");\n    return\n  }\n  const targetName = targetToken.name;\n\n  // Roll the result, and mark it drawn\n  if (table) {\n    if (checkTable(table)) {\n      let roll = await table.roll();\n      let result = roll.results[0];\n      mockery = result.data.text;\n      await table.updateEmbeddedDocuments(\"TableResult\", [{\n        _id: result.id,\n        drawn: true\n      }]);\n    }\n  }\n\n  function checkTable(table) {\n    let results = 0;\n    for (let data of table.data.results) {\n      if (!data.drawn) {\n        results++;\n      }\n    }\n    if (results < 1) {\n      table.reset();\n      ui.notifications.notify(\"Table Reset\")\n      return false\n    }\n    return true\n  }\n\n  // Add a message with damage roll\n  let numDie = 1;\n  if (actorLevels >= 17) {\n    numDie = 4;\n  } else if (actorLevels >= 11) {\n    numDie = 3;\n  } else if (actorLevels >= 5) {\n    numDie = 2;\n  }\n\n  let messageContent = `<p>${targetName} Roll WIS save DC [[8+${actor.data.data.abilities.cha.mod}+@attributes.prof]] or take [[${numDie}d4]] damage and have disadvantage.</p>`\n  messageContent += `<p>${token.name} exclaims <b><i>\"${mockery}\"</i></b></p>`\n  messageContent += `<details closed=\"\"><summary><a>Vicious Mockery</a></summary><p>You unleash a string of insults laced with subtle enchantments at a creature you can see within range. If the target can hear you (though it need not understand you), it must succeed on a <strong>Wisdom saving throw</strong> or take <strong>1d4 psychic damage</strong> and have <strong>disadvantage on the next attack roll</strong> it makes before the end of its next turn.</p>\n    <p>This spell’s damage increases by 1d4 when you reach 5th level ([[/r 2d4]]), 11th level ([[/r 3d4]]), and 17th level ([[/r 4d4]]).</p></details>`\n\n  // create the message\n  if (messageContent !== '') {\n    let chatData = {\n      user: game.user.id,\n      speaker: ChatMessage.getSpeaker(),\n      content: messageContent,\n    };\n    ChatMessage.create(chatData, {});\n  }\n};\n\nviciousMockeries();","folder":"dz7rvMlddmEBAhGn","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.foundry_community_macros.community-macros-5e.bUEeDjvYU5xEtZAr"}},"_id":"W4czdVYdeDRPK1dX"}
{"name":"Stealth Check","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"// Grabs selected tokens and rolls a stealth check against all other tokens passive perception on the map. Then returns the result.\n\n// getting all actors of selected tokens\nlet actors = canvas.tokens.controlled.map(({ actor }) => actor);\n\n// if there are no selected tokens, roll for the player's character.\nif (actors.length < 1 && game.user.character) {\n  actors = [game.user.character];\n}\nconst validActors = actors.filter(actor => actor != null);\n\nlet messageContent;\nif (validActors.length) {\n  messageContent = 'pp = passive perception<br>';\n} else {\n  messageContent = 'No tokens selected, please select at least one.';\n}\n// roll for every actor\nfor (const selectedActor of validActors) {\n  const stealthMod = selectedActor.data.data.skills.ste.total; // stealth roll\n  const result = await new Roll(`1d20+${stealthMod}`).roll({async: true});\n  const stealth = result.total; // rolling the formula\n  messageContent += `<hr><h3>${selectedActor.name} stealth roll was a <b>${stealth}</b> (1d20 + ${stealthMod}).</h3>`; // creating the output string\n\n  // grab a list of unique tokens then check their passive perception against the rolled stealth.\n  const uniqueActor = {};\n  const caughtBy = canvas.tokens.placeables\n    .filter(token => !!token.actor)\n    .filter(({ actor }) => actor.data.data.attributes.hp.value > 0) // filter out dead creatures.\n    .filter(({ actor }) => { // filter out duplicate token names. ie: we assume all goblins have the same passive perception\n      if (uniqueActor[actor.name]) {\n        return false;\n      }\n      uniqueActor[actor.name] = true;\n      return true;\n    })\n    .filter(({ actor }) => {\n      return selectedActor.id !== actor.id; // Don't check to see if the token sees himself.\n    })\n    .filter(({ actor }) => actor.data.data.skills.prc.passive >= stealth); // check map tokens passives with roller stealth\n\n  if (!caughtBy.length) {\n    messageContent += 'Stealth successful!<br>';\n  } else {\n    messageContent += 'Stealth questionable:<br>';\n    caughtBy.map(({ actor }) => {\n      messageContent += `<b>${actor.name}</b> pp(${actor.data.data.skills.prc.passive}).<br>`;\n    });\n  }\n}\n\n// create the message\nconst chatData = {\n  user: game.user._id,\n  speaker: game.user,\n  content: messageContent,\n  whisper: game.users.filter((u) => u.isGM).map((u) => u._id),\n};\nChatMessage.create(chatData, {});","folder":"dz7rvMlddmEBAhGn","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.foundry_community_macros.community-macros-5e.2RitOkKtnQe9pbuF"}},"_id":"WmmEOour6hWyteVC"}
{"name":"mcv1","type":"script","author":"BE1AvdNlONTKAxyV","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":"0pxeOcIwCIZUTpqB","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{},"_id":"XrybEgO8n1N3gncL"}
{"name":"animate-pan","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"/* Pan the camera to the X, Y and scale positions.\r\n * See the 'pan-camera' macro for more details.\r\n * The first argument is the duration in milliseconds for the panning animation\r\n * The second argument is X, third argument is Y and fourth argument is the zoom level\r\n * Example: /animate-pan 500 1500 1500 0.5\r\n */\r\n\r\ncanvas.animatePan({duration: args[0], x: args[1], y: args[2], scale: args[3]})","folder":"cqjFxCW4yJ1VFA4W","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.advanced-macros.macros.63bPkXo7BUsZEQJ0"}},"_id":"YuIGHTuLYniiOFA8"}
{"name":"pan-camera","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"// Pan the canvas camera to a position X and Y, in pixels.\r\n// Can also set the zoom level using the third optional argument.\r\n// Example: /pan-camera 1500\r\n// Example: /pan-camera 2500 2000 0.3\r\n\r\ncanvas.pan({x: args[0], y: args[1], scale: args[2]})","folder":"cqjFxCW4yJ1VFA4W","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.advanced-macros.macros.wg8eFxpVcgewRvsu"}},"_id":"ZrddY83cRdrCfSkQ"}
{"name":"Random Cutting Words","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"// Courtesy of @Zarek\n// Selected target receives a random cutting word from a table called \"Mockeries\" along with the roll reduction.\n// You can find a mockeries table in the community table module.\n\nlet cuttingWords = async () => {\n  // Setup variables\n  let tableName = \"mockeries\";\n  let mockery = \"Now go away or I shall taunt you a second time-a!\"; // if table can't be found, use this.\n\n  if (!actor) {\n    ui.notifications.warn(\"You must have an actor selected.\");\n    return\n  }\n\n  let actorLevels = actor.data.data.levels || 1;\n  let table = game.tables.contents.find(t => t.name == tableName);\n  // Get Targets name\n  const targetId = game.user.targets.ids[0];\n  const targetToken = canvas.tokens.get(targetId);\n  if (!targetToken) {\n    ui.notifications.warn(\"You must target a token.\");\n    return\n  }\n  const targetName = targetToken.name;\n\n  // Roll the result, and mark it drawn\n  if (table) {\n    if (checkTable(table)) {\n      let roll = await table.roll();\n      let result = roll.results[0];\n      mockery = result.data.text;\n      await table.updateEmbeddedDocuments(\"TableResult\", [{\n        _id: result.id,\n        drawn: true\n      }]);\n    }\n  }\n\n  function checkTable(table) {\n    let results = 0;\n    for (let data of table.data.results) {\n      if (!data.drawn) {\n        results++;\n      }\n    }\n    if (results < 1) {\n      table.reset();\n      ui.notifications.notify(\"Table Reset\")\n      return false\n    }\n    return true\n  }\n\n  let dieType = 'd6';\n  if (actorLevels >= 15) {\n    dieType = 'd12';\n  } else if (actorLevels >= 10) {\n    dieType = 'd10';\n  } else if (actorLevels >= 5) {\n    dieType = 'd8';\n  }\n\n  let messageContent = `<p>${targetName} Reduce your roll by: <b>[[1${dieType}]]</b>.</p>`\n  messageContent += `<p>${token.name} exclaims <b><i>\"${mockery}\"</i></b></p>`\n  messageContent += `<details closed=\"\"><summary><a>Cutting Words</a></summary>\n  <p>When a creature that you can see within 60 feet of you makes an <b>Attack roll, an ability check, or a damage roll</b>, you can use your <b>Reaction</b> to expend one of your uses of <b>Bardic Inspiration</b>,\n  rolling a Bardic Inspiration die and subtracting the number rolled from the creature’s roll.</p>\n  <p>You can choose to use this feature after the creature makes its roll, but before the GM determines whether the Attack roll or ability check succeeds or fails, or before the creature deals its damage. \n  The creature is immune if it can’t hear you or if it’s immune to being <b>Charmed</b>.</p></details>`\n\n  // create the message\n  if (messageContent !== '') {\n    let chatData = {\n      user: game.user.id,\n      speaker: ChatMessage.getSpeaker(),\n      content: messageContent,\n    };\n    ChatMessage.create(chatData, {});\n  }\n};\n\ncuttingWords();","folder":"dz7rvMlddmEBAhGn","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.foundry_community_macros.community-macros-5e.AbzZdXi97q8oHOUn"}},"_id":"aq8AfIe5Z41nxFV0"}
{"name":"Initiative With Disadvantage","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"// Initiative with Disadvantage by Nulmas#9462\n// Thanks to Freeze#2689, vance#1935 and u/Azzu for the help.\n\n// This macro allows GMs and players to roll for Initiative with disadvantage when playing D&D 5e. Hopefully it won't be needed for long and the option for it will be added \n// to the system in a future release.\n\n// The macro will roll for all the selected tokens and add them to the combat if they aren't in it already. It will also check if you are using Dex as a tiebreaker and roll\n// accordingly.\n\n// BEWARE: If a token has already rolled for initiative and you use this macro with it selected, the new initiative will replace the old one. I considered changing this, but\n// decided it's worth keeping it this way in case a player or GM rolls for initiative without disadvantage by mistake.\n\n(async () => {\n    if (canvas.tokens.controlled.length === 0) return ui.notifications.error(\"Choose tokens to roll for\");\n    await canvas.tokens.toggleCombat();\n    let chosenTokens = canvas.tokens.controlled;\n    let tieBreakerCheck = game.settings.get(\"dnd5e\", \"initiativeDexTiebreaker\") ? 1 : 0; //Checks if Dex tiebreaker is being used\n    let initiatives = chosenTokens.map(t => {\n        let chosenActor = t.actor;\n        let advantage = chosenActor.getFlag(\"dnd5e\", \"initiativeAdv\") ? 1 : 0;\n        let init = chosenActor.data.data.attributes.init.total;\n        let tieBreaker = chosenActor.data.data.abilities.dex.value/100;\n        let roll = new Roll(`${2 - advantage}d20kl + ${init} + ${tieBreaker * tieBreakerCheck}`).roll({async: false});\n        roll.toMessage({speaker: ChatMessage.getSpeaker({token: t.document})});\n        let combatantId = t.combatant.id;\n        return{\n            _id: combatantId,\n            initiative: roll.total,\n        };\n    });\n    await game.combat.updateEmbeddedDocuments(\"Combatant\", initiatives);\n})();","folder":"dz7rvMlddmEBAhGn","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Macro.vvUdCHKq60JcksaX"}},"_id":"bTv8VHZ4TiXrwc2t"}
{"name":"Rage","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"//\t\tDISCLAIMER:\t\tThis macro is an evolved version of the original D&D 5e Rage Macro masterwork written by Felix#6196.\n//\t\t\t\t\t\tNorc#5108 is now maintaining this macro along with continued support from Felix.\n//\n//\n//\t\tUPDATES:\t\t1.\tFixed errors resulting from declarations of \"actor\" and \"token\" in a script macro. \n//\t\t\t\t\t\t\tAdded automatic Totem Spirit: Bear detection and resistance application \n//\t\t\t\t\t\t\tAdded error messages for trying to rage with no token or no barbarian selected\n//\t\t\t\t\t\t2.\t(Felix) Added resource/usage deduction and errors (re-added after accidentally overwriting the addition)\n//\t\t\t\t\t\t\tFixed rage damage at level 8\n//\t\t\t\t\t\t3.\t(2020/05/30) \"Version 2.0\" \t\n//\t\t\t\t\t\t\tImplemented Felix's idea to use global melee weapon attack bonus instead of modifying items\n//\t\t\t\t\t\t\tImproved Rage icon toggling to be more reliable\n//\t\t\t\t\t\t\tRemoved code from the resource management that created dependency on The Furnace Advanced Macros\n//\t\t\t\t\t\t\tImplemented Felix's fix for issue where new resistances and rage uses were not saving properly\n//\t\t\t\t\t\t\tFixed rage damage formula again...\n//\t\t\t\t\t\t\tAdded basic support for non-strength Based barbarians (Dex, Hexblade)\n//\t\t\t\t\t\t\tAdded optional ability to toggle the icon and name of the macro itself based on current raging state.\n//\t\t\t\t\t\t4.\t(2020/06/04) \n//\t\t\t\t\t\t\tFixed bug with experimental macro name/icon toggle only by renaming \"actor\" and \"token\"\n//\t\t\t\t\t\t\tAdded basic localization support to allow searching for translated class features\n//\t\t\t\t\t\t5.\t(2020/06/10)\n//\t\t\t\t\t\t\tRework to rage damage logic under the hood for edge case (other changes to bonus damage mid-combat) \n//\t\t\t\t\t\t\tRemoved logic that was causing multiple character sheets to open in some cases\n//\t\t\t\t\t\t\tEnhanced localization support\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!   Bonus Tip 1: \t\tOptional Rage Resource Consumption\n//!!!\tTo automatically use and track Rage, you must have a resource exactly named \"Rage\" on your character sheet. This text can be changed\n//!!!\tby altering the value for \"rageResourceName\" in the LOCALIZATION SUPPORT section below).\n//!!!\tNote: \tImporting via VTTA Beyond Integration uses this text already. The macro can then automatically detect the Rage resource.\n//!!!\n//!!!\tBonus Tip 2: \t\tBear Totem Spirit Barbs\n//!!!\tIf you chose the Spirit Seeker Primal path, and at level 3 you chose the Bear Totem Spirit (resistance to all non-psychic damage), \n//!!!\tin your 5E character sheet, double-check that the name of your Totem Spirit feature to EXACTLY \"Totem Spirit: Bear\". This text can be\n//!!!\tchanged by altering the value for \"bearTotemFeatureName\" in the LOCALIZATION SUPPORT section below).\n//!!!\tNote: \tImporting via VTTA Beyond Integration uses this text already. The macro then automatically adds the extra \n//!!!\t\t\tBear Totem Spirit resistances.\n//!!!\n//!!!\tBonus Tip 3: \t\tThrown Weapons\n//!!!\tWhen a barb throws a weapon using strength, typically a javelin but also possibly a dagger, dart, sword, bar table etc, the rage bonus\n//!!!\tshould not be added because it is a ranged attack. However, D&D5E calls javelins and daggers Melee Weapons, because technically they\n//!!!\tare both. To solve this issue, if you always throw the weapon, click the weapon's details and change the attack type to \"Ranged Weapon\n//!!!\tAttack\" in the Action Type dropdown. If you want, you can add a second copy of the item (with no weight/quantity) to use for meleeing.\n//!!!\n//!!!\tBonus Tip 4: \t\tThe Rage Condition\n//!!!\tIf you use the Combat Utility Belt module's Condition Lab, try adding a condition called \"Raging\" with the same icon\n//!!!\tas the optional rage icon overlay, 'icons/svg/explosion.svg' by default.  See EXPERIMENTAL MACRO ICON/NAME TOGGLE section below.\n//!!!\n//!!!\tBonus Tip 5: \t\tObsidian Sheet Compatibility\n//!!!\tIf using Obsidian module, try replacing \"Barbarian\" with \"brb\" as the barbClassName value in LOCALIZATION SUPPORT below.\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tOPTIONAL TOKEN ICON-\tOn by default. If a path to a rage icon is defined, it displays like a condition on the raging barbarian.\n//!!!\t\t\t\t\t\t\tTo use a different icon, manually change the filepath below or leave it empty ('') to disable the effect.\n//!!!\nconst rageIconPath = 'icons/svg/explosion.svg';\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tOPTIONAL RESOURCE DEDUCTION \tOn by default. First option automatically subtracts from the Rage Resource if enabled.\n//!!!\t\t\t\t\t\t\t\t\tSecond option prevents raging if no Rage resource is left. Set to false if you do not want this.\n\n\t\t\tconst deductResource = true;\n\t\t\tconst preventNegativeResource = true;\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tOPTIONAL NON-STRENGTH BARBARIAN SUPPORT\t\tONLY override to FALSE if your barbarian does not use Strength to make melee attacks\n//!!!\t\t\t\t\t\t\t\t\t\t\t\tand therefore does not get the Rage bonus to melee weapon attack damage.\n//!!!\n\t\t\tconst strAttacks = true;\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tEXPERIMENTAL MACRO ICON/NAME TOGGLE\t\tIf enabled, the macro icon and name toggles based on the barbarian's rage state.\n//!!!\t\t\t\t\t\t\t\t\t\t\tCAUTIONS: \t1. \tThis feature is off by default and is intended for ADVANCED USERS ONLY.\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t2. \tRequires configuration using \"The Furnace\" module for a player to run!\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tThe GM needs to grant The Furnace's \"Run as GM\" permission for this macro.\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t3. \tWorks best with only one barbarian using this feature at a time.\n\n\t\t\t//To auto-toggle the macro's icon/name, override toggleMacro to true below.\n\t\t\tconst toggleMacro = false;\n\n\t\t\t//To use a different icon, manually change the filepath here\n\t\t\tconst stopRageIconPath = 'icons/svg/unconscious.svg';\n\n\t\t\t//You must update the following constant to this macro's exact name for the macro icon toggling to work.\n\t\t\tconst rageMacroName = 'Rage';\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//declarations\nlet barb = '';\nlet chatMsg = '';\nlet bear = '';\nlet noRage = false;\nlet rageDmgAdded = false;\nlet toggleResult = false;\nlet macroActor = actor;\nlet macroToken = token;\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tLOCALIZATION SUPPORT\t\t\t\tSets names of D&D5E features as constants instead of hardcoding to allow easier translation.\n//!!!\t\t\t\t\t\t\t\t\t\tSets error messages and flavor text as constants also for easier translation.\n//!!!\n\t\t\t//MUST MATCH VALUES IN CHARACTER SHEET (if present)\n\t\t\tconst barbClassName = 'Barbarian';\n\t\t\tconst rageResourceName = 'Rage';\n\t\t\tconst bearTotemFeatureName = 'Totem Spirit: Bear';\n\n\t\t\t//All remaining values may be changed freely\n\n\t\t\t//Rage chat message flavor text. Actor's name appears immediately before these two strings in the message.\n\t\t\tconst rageMsg = ' is RAAAAAGING!'\n\t\t\tconst endRageMsg =  ' is no longer raging.';\n\n\t\t\t//error and warning messages\n\t\t\tconst errorSelectBarbarian = 'Please select a single barbarian token.';\n\t\t\tconst errorNoRage = ' does not have any rage left, time for a long rest!';\n\t\t\tconst warnMacroNotFound = ' is not a valid macro name, please fix. Rage toggle successful but unable to alter macro.';\n\t\t\tconst errorSelectToken = 'Please select a token.';\n\t\t\tconst errorFailRevert = 'Failed to revert global melee weapon attack bonus, please check manually.';\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n//main\n//check to see if Actor exists and is a barbarian\nif (macroActor !== undefined && macroActor !== null) {\n\n\t// get the barbarian class item\n\tbarb = macroActor.items.find(i => i.name === `${barbClassName}`);\n\tif (barb == undefined) {\n\t\tui.notifications.warn(`${errorSelectBarbarian}`);\n\t}\n\tif (barb !== undefined && barb !== null) {\n\t\tlet enabled = false;\n\t\t// Store the state of the rage toggle flags that indicate if rage is active or not\n\t\tif (macroActor.data.flags.rageMacro !== null && macroActor.data.flags.rageMacro !== undefined) {\n\t\t\tenabled = true;\n\t\t\t\t// Store whether there is also a rage damage bonus currently active\n\t\t\t\tif (macroActor.data.flags.rageMacro[\"rageDmgAdded\"] == true) {\n\t\t\t\t\trageDmgAdded = true;\n\t\t\t\t}\n\t\t}\n\n\t\t//Calculate rage value for use in damage reversion and application\n\t\t// Determining the barbarian level\n\t\tlet barblvl = barb.data.data.levels;\n\n\t\t// Formula to determine the rage bonus damage depending on barbarian level\n\t\tlet lvlCorrection =  barblvl === 16 || barblvl === 17 ? 1 : 0;\n\t\tlet rageDmg = 2 + Math.floor(barblvl / 9) + lvlCorrection;\n\t\tlet dmg = JSON.parse(JSON.stringify(macroActor.data.data.bonuses.mwak.damage));\n\n\t\t// if rage is active, disable it\n\t\tif (enabled) {\n\t\t\tchatMsg = `${macroActor.name} ${endRageMsg}`;\n\t\t\t// reset resistances and melee weapon attack bonus\n\t\t\tlet obj = {};\n\t\t\tobj['flags.rageMacro'] = null;\n\t\t\t//revert damage resistances\n\t\t\tobj['data.traits.dr'] = macroActor.data.flags.rageMacro.oldResistances;\n\n\t\t\t//carefully revert rage global mwak damage bonus to original value, if that bonus is active\n\t\t\t//eventually want to add support so only last instance found is replaced.\n\t\t\tif(rageDmgAdded) {\n\t\t\t\tif (dmg == rageDmg || dmg == null || dmg == undefined || dmg == '' || dmg == 0){\n\t\t\t\t\tconsole.log('Removing simple rage damage');\n\t\t\t\t\tobj['data.bonuses.mwak.damage']='';\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('Removing complex rage damage');\n\t\t\t\t\tlet patt = `\\\\s\\\\+\\\\s${rageDmg}($|[^0123456789dkrxcm(@{])`;\n\t\t\t\t\tlet result = dmg.search(patt);\n\t\t\t\t\tif (result !== -1) {\n\t\t\t\t\t\tlet len = ('' + rageDmg).length;\n\t\t\t\t\t\tlet origDmg = duplicate(dmg);\n\t\t\t\t\t\tlet firstHalfDmg = duplicate(dmg).substring(0,result);\n\t\t\t\t\t\t//Test String: 2d6 + 2 + 2d6\n\t\t\t\t\t\tlet lastHalfDmg = duplicate(dmg).substring(result+3+len, origDmg.length);\n\t\t\t\t\t\tdmg = `${firstHalfDmg}${lastHalfDmg}`;\n\t\t\t\t\t\tobj['data.bonuses.mwak.damage']=dmg;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tui.notifications.error(`${errorFailRevert}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmacroActor.update(obj);\n\n\t\t// if rage is disabled, enable it\n\t\t} else {\n\t\t\tif (deductResource) {\n\t\t\t\tlet hasAvailableResource = false;\n\t\t\t\tlet newResources = duplicate(macroActor.data.data.resources)\n\t\t\t\tlet obj = {}\n\t\t\t\t// Look for Resources under the Core macroActor data\n\t\t\t\tlet resourceKey = Object.keys(macroActor.data.data.resources).filter(k => macroActor.data.data.resources[k].label === `${rageResourceName}`).shift();\n\t\t\t\tif (resourceKey && (macroActor.data.data.resources[resourceKey].value > 0 || !preventNegativeResource)) {\n\t\t\t\t\thasAvailableResource = true;\n\t\t\t\t\tnewResources[resourceKey].value--;\n\t\t\t\t\tobj['data.resources'] = newResources \n\t\t\t\t\tmacroActor.update(obj);\n\t\t\t\t}\n\t\t\t\tif (!hasAvailableResource) {\n\t\t\t\t\tui.notifications.error(`${macroActor.name} ${errorNoRage}`);\n\t\t\t\t\tnoRage=true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//activate rage if there is rage available, or if it is okay to rage with 0 resources\n\t\t\tif (!noRage) {\n\t\t\t\tchatMsg = `${macroActor.name} ${rageMsg}`;\n\t\t\t\t// update resistance\n\t\t\t\tlet obj = {};\n\t\t\t\t// storing old resistances in flags to restore later\n\t\t\t\tobj['flags.rageMacro.enabled'] = true;\n\t\t\t\tobj['flags.rageMacro.oldResistances'] = JSON.parse(JSON.stringify(macroActor.data.data.traits.dr));\n\t\t\t\t// add bludgeoning, piercing and slashing resistance\n\t\t\t\tlet newResistance = duplicate(macroActor.data.data.traits.dr);\n\t\t\t\tif (newResistance.value.indexOf('bludgeoning') === -1) newResistance.value.push('bludgeoning');\n\t\t\t\tif (newResistance.value.indexOf('piercing') === -1) newResistance.value.push('piercing');\n\t\t\t\tif (newResistance.value.indexOf('slashing') === -1) newResistance.value.push('slashing');\n\t\t\t\t//If bear totem, add bear totem resistances.\n\t\t\t\tbear = macroActor.items.find(i => i.name === `${bearTotemFeatureName}`)\n\t\t\t\tif (bear !== undefined && bear!== null) {\n\t\t\t\t\tif (newResistance.value.indexOf('acid') === -1) newResistance.value.push('acid');\n\t\t\t\t\tif (newResistance.value.indexOf('cold') === -1) newResistance.value.push('cold');\n\t\t\t\t\tif (newResistance.value.indexOf('fire') === -1) newResistance.value.push('fire');\n\t\t\t\t\tif (newResistance.value.indexOf('force') === -1) newResistance.value.push('force');\n\t\t\t\t\tif (newResistance.value.indexOf('lightning') === -1) newResistance.value.push('lightning');\n\t\t\t\t\tif (newResistance.value.indexOf('necrotic') === -1) newResistance.value.push('necrotic');\n\t\t\t\t\tif (newResistance.value.indexOf('poison') === -1) newResistance.value.push('poison');\n\t\t\t\t\tif (newResistance.value.indexOf('radiant') === -1) newResistance.value.push('radiant');\n\t\t\t\t\tif (newResistance.value.indexOf('thunder') === -1) newResistance.value.push('thunder');\n\t\t\t\t}\n\t\t\t\tobj['data.traits.dr'] = newResistance;\n\t\t\t\tmacroActor.update(obj);\n\n\t\t\t\t// For Strength barbarians, update global melee weapon attack bonus to include rage bonus\n\t\t\t\tif (strAttacks) {\n\t\t\t\t\tobj['flags.rageMacro.rageDmgAdded'] = true;\n\t\t\t\t\t// Preserve old mwak damage bonus if there was one, just in case\n\t\t\t\t\tobj['flags.rageMacro.oldDmg'] = JSON.parse(JSON.stringify(dmg));\n\t\t\t\t\t//actually add the bonus rage damage to the previous bonus damage\n\t\t\t\t\t//respect roll formulas by doing string addition if value is already present.\n\t\t\t\t\tif (dmg == null || dmg == undefined || dmg == 0 || dmg == '') {\n\t\t\t\t\t\tconsole.log('Adding simple rage damage');\n\t\t\t\t\t\tobj['data.bonuses.mwak.damage'] = rageDmg;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log('Adding complex rage damage');\n\t\t\t\t\t\tobj['data.bonuses.mwak.damage'] = `${dmg} + ${rageDmg}`;\n\t\t\t\t\t}\n\t\t\t\t\tmacroActor.update(obj);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!noRage) {\n\t\t\t// toggle rage icon, if rage path is defined above\n\t\t\t(async () => { \n\t\t\t\ttoggleResult = await macroToken.toggleEffect(rageIconPath);\n\t\t\t\tif (toggleResult == enabled) macroToken.toggleEffect(rageIconPath);  \n\t\t\t})();\n\t\t\t\n\t\t\t//toggle macro icon and name, if macro name is correct and stop rage icon path is defined\n\t\t\tlet rageMacro = game.macros.getName(rageMacroName);\n\t\t\t\t//check for name of macro in its \"off\" form\n\t\t\t\tif (rageMacro == null || rageMacro == undefined) {\n\t\t\t\t\trageMacro = game.macros.getName('Stop ' + rageMacroName);\n\t\t\t\t}\n\t\t\tlet obj = {};\n\t\t\tif ( (rageMacro !== null && rageMacro !== undefined) && toggleMacro == true && \n\t\t\t\t\t+ (stopRageIconPath !== null && stopRageIconPath !== undefined && stopRageIconPath !== '') ) {\n\t\t\t\tif (enabled) {\n\t\t\t\t  obj['img'] = rageIconPath;\n\t\t\t\t  obj['name'] = rageMacroName;\n\t\t\t\t} else {\n\t\t\t\t  obj['img'] = stopRageIconPath;\n\t\t\t\t  obj['name'] = 'Stop ' + rageMacroName;\n\t\t\t\t}\n\t\t\t\trageMacro.update(obj);\n\t\t\t} else {\n\t\t\tif (toggleMacro == true) ui.notifications.warn(`${rageMacroName} ${warnMacroNotFound}`);\n\t\t\t}\n\t\t}\n\t}\n} else ui.notifications.warn(errorSelectToken);\n// write to chat if needed:\nif (chatMsg !== '') {\n\tlet chatData = {\n\t\tuser: game.user._id,\n\t\tspeaker: ChatMessage.getSpeaker(),\n\t\tcontent: chatMsg\n\t};\n\tChatMessage.create(chatData, {});\n}","folder":"dz7rvMlddmEBAhGn","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.foundry_community_macros.community-macros-5e.whXLG5afXGwYNXEq"}},"_id":"gcFzRHcI9n2vDER4"}
{"name":"Show Token Actions","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"/*\n* Requires: DND5e.\n* Provides a dialog showing all action-triggered equipment, prepared and at-will spells, feats, and consumables,\n* as well as passive feats. Hopefully makes triggering actions easier without needing the character sheet open\n* all the time.\n* WARNING: Very ugly.\n* author/blame: ^ and stick#0520\n* with enormous help on the button events (and no blame to be attributed to): Skimble#8601\n*/\n\nclass ActionDialog extends Application {\n    super(options){\n    }\n\n    activateListeners(html) {\n        super.activateListeners(html);\n        const buttons = html.find(\"button[class='show-action-button']\");\n\n        if (buttons.length > 0)\n            buttons.on(\"click\", event => {this.openActionTab(event, html);});\n    }\n\n    openActionTab(event, html) {\n        // Declare all variables\n        var i, tabcontent, tablinks;\n\n        // Get all elements with class=\"tabcontent\" and hide them\n        tabcontent = document.getElementsByClassName(\"show-action-category\");\n        for (let t of tabcontent) {\n            t.style.display = \"none\";\n        }\n\n        // Get all elements with class=\"tablinks\" and remove the class \"active\"\n        tablinks = document.getElementsByClassName(\"show-action-button\");\n        for (let t of tablinks) {\n            t.className = t.className.replace(\" active\", \"\");\n        }\n\n        // Show the current tab, and add an \"active\" class to the button that opened the tab\n        if (event.target.value == \"showActionAll\") {\n            tabcontent = document.getElementsByClassName(\"show-action-category\");\n            for (let t of tabcontent) {\n                t.style.display= \"block\";\n            }\n        } else {\n            if (document.getElementById(event.target.value) != null)\n                document.getElementById(event.target.value).style.display = \"block\";\n        }\n        event.currentTarget.className += \" active\";\n    }\n\n    getData(){\n        // Get user's character or the first token from the controlled list.\n        function getTargetActor() {\n            const character = game.user.character;\n            if (character != null)\n                return character;\n\n            const controlled = canvas.tokens.controlled;\n\n            if (controlled.length === 0) return character || null;\n\n            if (controlled.length > 0 && controlled[0] != null) {\n                return controlled[0].actor;\n            }\n        }\n\n        function buildActionsList(targetActor) {\n            let equipped = targetActor.data.items.filter(i => i.type !=\"consumable\" && getProperty(i.data, \"data.equipped\"));\n            let activeEquipped = getActiveEquipment(equipped);\n            let weapons = activeEquipped.filter(i => i.type == \"weapon\");\n            let equipment = activeEquipped.filter(i => i.type == \"equipment\");\n\n            let other = activeEquipped.filter(i => i.type != \"weapon\" && i.type != \"equipment\");\n            let consumables = targetActor.data.items.filter(i => i.type == \"consumable\");\n            let items = { \"weapons\": weapons, \"equipment\": equipment, \"other\": other, \"consumables\": consumables };\n\n            let preparedSpells = targetActor.data.items.filter(i => i.type == \"spell\" && getProperty(i.data, \"data.preparation.prepared\"));\n            let spells = categoriseSpells(preparedSpells);\n\n            let allFeats = targetActor.data.items.filter(i => i.type == \"feat\");\n            let activeFeats = getActiveFeats(allFeats);\n            let passiveFeats =  getPassiveFeats(allFeats);\n            let feats = {\"active\": activeFeats, \"passive\": passiveFeats};\n\n\n            return { \"equipment\": items,\"spells\": spells, \"feats\": feats };\n        }\n\n        function getActiveEquipment(equipment) {\n            const activationTypes = Object.entries(game.dnd5e.config.abilityActivationTypes);\n\n            let activeEquipment = equipment.filter(e => {\n                if (getProperty(e.data, \"data.activation\") == undefined)\n                    return false;\n\n                for (let [key, value] of activationTypes) {\n                    if (getProperty(e.data, \"data.activation.type\") == key)\n                        return true;\n                }\n\n                return false;\n            });\n\n            return activeEquipment;\n        }\n\n        function categoriseSpells(spells) {\n            let powers = {};\n            let book = {}\n\n            book = spells.reduce(function (book, spell) {\n                var level = getProperty(spell.data, \"data.level\");\n                let prep = getProperty(spell.data, \"data.preparation.mode\");\n\n                const prepTypes = game.dnd5e.config.spellPreparationModes;\n                let prepType = prepTypes[prep];\n\n                if (prep == \"pact\" || prep == \"atwill\" || prep == \"innate\") {\n                    if (!powers.hasOwnProperty(prepType)) {\n                        powers[prepTypes[prep]] = [];\n                    }\n\n                    powers[prepType].push(spell);\n                } else {\n                    if (!book.hasOwnProperty(level)) {\n                        book[level] = [];\n                    }\n\n                    book[level].push(spell);\n                }\n\n                return book;\n            }, {});\n\n            return {\"book\": Object.entries(book), \"powers\": Object.entries(powers)};\n        }\n\n        function getActiveFeats(feats) {\n            const activationTypes = Object.entries(game.dnd5e.config.abilityActivationTypes);\n            let activeFeats = feats.filter(f => {\n                if (getProperty(f.data, \"data.activation\") == undefined)\n                    return false;\n\n                for (let [key, value] of activationTypes) {\n                    if (getProperty(f.data, \"data.activation.type\") == key)\n                        return true;\n                }\n\n                return false;\n            });\n\n            return Object.entries(activeFeats);\n        }\n\n        function getPassiveFeats(feats) {\n            const activationTypes = Object.entries(game.dnd5e.config.abilityActivationTypes);\n            let passiveFeats = feats.filter(f => {\n                if (getProperty(f.data, \"data.activation\") == undefined)\n                    return false;\n\n                for (let [key, value] of activationTypes) {\n                    if (getProperty(f.data, \"data.activation\") == key)\n                        return false;\n                }\n\n                return true;\n            });\n\n            return Object.entries(passiveFeats);\n        }\n\n        function getContentTemplate(actions) {\n            let template = `\n            <div>\n                 ${getCssStyle()}\n                <div class=\"show-action-form-group\">\n                    <div class=\"show-action-buttons\">\n                        <button value=\"showActionItems\" class=\"show-action-button\">Items</button>\n                        <button value=\"showActionSpells\" class=\"show-action-button\">Spells</button>\n                        <button value=\"showActionFeats\" class=\"show-action-button\">Feats</button>\n                        <button value=\"showActionAll\" class=\"show-action-button\">Show all</button>\n                    </div>\n                    </div>\n                    <div class=\"show-action-categories\">\n                        <div id=\"showActionItems\" class=\"show-action-category\">\n                            ${getItemsTemplate(actions.equipment)}\n                        </div>\n                        <div id=\"showActionSpells\" class=\"show-action-category\">\n                            ${getSpellsTemplate(actions.spells)}\n                        <div id=\"showActionFeats\" class=\"show-action-category\">\n                            ${getFeatsTemplate(actions.feats)}\n                        </div>\n                    </div>\n                </div>\n            </div>`;\n\n            return template;\n        }\n\n        // Gets a template of abilities or skills, based on the type of check chosen.\n        function getItemsTemplate(items) {\n            if (items.weapons.length + items.equipment.length + items.other.length + items.consumables.length === 0)\n                return \"\";\n\n            let template = `<div id=\"actionItems\" class=\"show-action-tabcontent\">\n                                <div class=\"show-action-tabcontent-title\">Items</div>\n                                    ${getItemsCategoryTemplate(\"Weapons\", items.weapons)}\n                                    ${getItemsCategoryTemplate(\"Equipment\", items.equipment)}\n                                    ${getItemsCategoryTemplate(\"Other\", items.other)}\n                                    ${getItemsCategoryTemplate(\"Consumables\", items.consumables)}\n                                </div>\n                            </div>`;\n\n            return template;\n        }\n\n        function getSpellsTemplate(spells) {\n            let template = `<div id=\"actionSpells\" class=\"show-action-tabcontent\">\n                                <div class=\"show-action-tabcontent-title\">Spells</div>\n                                    ${getSpellsCategoryTemplate(spells.powers)}\n                                    ${getSpellsCategoryTemplate(spells.book)}\n                                </div>\n                            </div>`;\n\n            return template;\n        }\n\n        function getFeatsTemplate(feats) {\n            if (feats.active.length + feats.passive.length === 0)\n                return \"\";\n\n            let template = `<div id=\"actionFeats\" class=\"show-action-tabcontent\">\n                                <div class=\"show-action-tabcontent-title\">Feats</div>\n                                    ${getFeatsCategoryTemplate(\"Active\", feats.active)}\n                                    ${getFeatsCategoryTemplate(\"Passive\", feats.passive)}\n                                </div>\n                            </div>`;\n\n            return template;\n        }\n\n        function getItemsCategoryTemplate(title, items) {\n            if (items.length === 0)\n                return \"\";\n\n            let template = `<div class=\"show-action-tabcontent-subtitle\">${title}</div>\n                            <div class=\"show-action-tabcontent-actions\">`;\n            for (let i of items) {\n                template += `<input id=\"weapon-${i.name}\" type=\"button\" value=\"${i.name}\" onclick=\"${getRollItemMacro(i.name)}\"/>`;\n            }\n\n            template += `</div>`;\n\n            return template;\n        }\n\n        function getSpellsCategoryTemplate(spells) {\n            if (spells.length === 0)\n                return \"\";\n\n            let template = \"\";\n\n            for (let [level, entries] of spells) {\n                console.log(!isNaN(level.toString()));\n                let subtitle = isNaN(level) ? level : (level.toString() === '0' ? `Cantrips` : `Level ${level}`);\n\n                template += `<div class=\"show-action-tabcontent-subtitle\">${subtitle}</div>\n                                <div class=\"show-action-tabcontent-actions\">`;\n\n                for (let s of entries) {\n                    template += `<input id=\"spell-${s.name}\" type=\"button\" value=\"${s.name}\" onclick=\"${getRollItemMacro(s.name)}\"/>`;\n                }\n\n                template += `</div>`;\n            }\n\n            return template;\n        }\n\n        function getFeatsCategoryTemplate(subtitle, feats) {\n            if (feats.length === 0)\n                return \"\";\n\n            let template = `<div class=\"show-action-tabcontent-subtitle\">${subtitle}</div>\n                            <div class=\"show-action-tabcontent-actions\">`\n\n            for (let [index, f] of feats) {\n                template += `<input id=\"feat-${f.name}\" type=\"button\" value=\"${f.name}\" onclick=\"${getRollItemMacro(f.name)}\"/>`;\n            }\n\n            template += `</div>`\n\n\n            return template;\n        }\n\n        function getCssStyle() {\n            return `\n            <style type=\"text/css\">\n            .show-action-buttons {\n                display: grid;\n                grid-template-columns: repeat(5, 1fr);\n                grid-gap: 10px;\n            }\n\n            .show-action-buttons button {\n                width: auto;\n                height: auto;\n                background-color: #eee;\n                float: left;\n                border: none;\n                outline: none;\n                cursor: pointer;\n                padding: 5px 8px;\n                transition: 0.3s;\n                display: block;\n              }\n                            \n              /* Change background color of buttons on hover */\n              .show-action-buttons button:hover {\n                background-color: #ddd;\n              }\n              \n              /* Create an active/current tablink class */\n              .show-action-buttons button.active {\n                background-color: #ccc;\n              }\n\n              .show-action-categories {\n                clear: both;\n              }\n              \n              /* Style the tab content */\n              .show-action-tabcontent {\n                display: block;\n                padding: 6px 12px;\n                border: 1px solid #ccc;\n                border-bottom: none;\n                border-left: none;\n                border-right: none;\n              }\n\n              .show-action-tabcontent-title {\n                    clear: both;\n                    font-size: large;\n              }\n\n              .show-action-tabcontent-subtitle {\n                  padding: 5px;\n                  margin: 2px;\n                  float: left;\n              }\n\n              .show-action-tabcontent input {\n                border: 1px solid #555;\n                padding: 5px;\n                margin: 2px;\n              }\n              \n              .show-action-tabcontent input:hover {\n              background-color: #ddd;\n              }\n            </style>`\n        }\n\n        function getRollItemMacro(itemName) {\n            return `game.dnd5e.rollItemMacro(&quot;${itemName}&quot;)`;\n        }\n\n        // set this to true if you want results whispered to the GM\n        let targetActor = getTargetActor();\n        let innerContent = \"\";\n\n        if (targetActor != null || targetActor) {\n            this.options.title = `${targetActor.name} actions`;\n            let actionLists = buildActionsList(targetActor);\n            innerContent = getContentTemplate(actionLists);\n        } else {\n            ui.notifications.error(\"No token selected or user character found.\");\n            throw new Error(\"No token selected or character found\");\n        }\n\n        var content =  `<div id=\"actionDialog\">${innerContent}</div>`;\n        var contentsObject = {content:`${content}`}\n        return contentsObject;\n    }\n}\n\nlet opt=Dialog.defaultOptions;\nopt.resizable=true;\nopt.title=\"Choose action\";\nopt.minimizable=true;\nopt.width=600;\nvar viewer;\nviewer = new ActionDialog(opt);\nviewer.render(true);","folder":"dz7rvMlddmEBAhGn","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.foundry_community_macros.community-macros-5e.sjMYdsr3UapvE20H"}},"_id":"gd69tYxRrB4CxVbW"}
{"name":"journal-dialog","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"// This macro requires the advanced macros of Furnace\r\n// This will display the contents of a journal as a dialog\r\n// Takes one argument, the journal name\r\n// Example: /journal-dialog \"Welcome to my world\"\r\n\r\nconst journal = game.journal.entities.find(j => j.name === args[0])\r\nif (!journal) return;\r\nnew Dialog({content: journal.data.content,\r\n            buttons: {ok: {label: args[1] || \"ok\"}}}).render(true)","folder":"cqjFxCW4yJ1VFA4W","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.advanced-macros.macros.7g5Bw4kquOY7sr7j"}},"_id":"ip4PhvqPHhGfa5ID"}
{"name":"Say hello","type":"chat","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"Hi {{game.user.name}}, it is now {{macro \"current-time\"}}","folder":"cqjFxCW4yJ1VFA4W","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.advanced-macros.macros.hbpdu5LvSAOAp5PX"}},"_id":"kRI5PQcYVjsjvYSG"}
{"name":"Auto Sort Creatures by Type","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"/** ##################################################################################### *\n *  This macro loops over the existing creature actors in the actor directory and creates *\n *  folders corresponding to the creature type. It then sorts the creatures to the        *\n *  corresponding folder to make them quiet a bit more manageable, especially when you've *\n *  created/imported a lot of creatures.                                                  *\n *  I would recommend using the \"Compendium Folders\" module in combination to keep your   *\n *  initial load as fast as possible when you have a lot of actors.                       *\n *  ##################################################################################### *\n *  Credits to ZetaDracon#7558 and Freeze#2689                                            *\n *  ##################################################################################### */\nconst folderData = {\n    color: \"\",\n    parent: \"\",\n    sorting: \"a\",\n    type: \"Actor\"\n};\n// lets make the folders.\nfor(let actor of game.actors) {\n    const type = actor.data.data.details.type?.value;\n    if(!type) continue; // so player characters get filtered out.\n    const folder = game.folders.find(f => f.name.toLowerCase() === type && f.type === \"Actor\");\n    if(!folder) await Folder.create(mergeObject({name: type}, folderData));\n}\n// lets update the actors.\nconst updates = game.actors.reduce((acc, a) => {\n    const type = a.data.data.details.type?.value;\n    if(!type) return acc;  // so player characters get filtered out.\n    let folderId = game.folders.find(f => f.name.toLowerCase() === type && f.type === \"Actor\").id;\n    acc.push({_id: a.id, folder: folderId});\n    return acc;\n}, []);\nawait Actor.updateDocuments(updates);","folder":"dz7rvMlddmEBAhGn","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Macro.hQF9wAbhIcIzgMtU"}},"_id":"lsfNrHgkXS288ujU"}
{"name":"current-time","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"// Returns the current time in format \"HH:MM\" (24 hour format)\r\nconst now = new Date();\r\nreturn `${now.getHours()}:${now.getMinutes()}`;","folder":"cqjFxCW4yJ1VFA4W","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.advanced-macros.macros.PoygoBaDDvbDCluL"}},"_id":"nqIUpuxq0xzie027"}
{"name":"Divine Smite","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"/*\n * The Smite macro emulates the Divine Smite feature of Paladins in DnD 5e. A spell slot level to use\n * can be selected, which increases the number of damage dice, and smiting a fiend or undead\n * will also increase the number of damage dice.\n * \n * If a token is not selected, the macro will default back to the default character for the Actor. \n * This allows for the GM to cast the macro on behalf a character that possesses it, \n * without requiring that a PC have their character selected.\n * To execute the macro a target MUST be specified and, unless configured otherwise, the character must have an available spell slot. \n * Make your regular attack and then if you choose to use Divine Smite, run this macro.\n */\n\n(() => {\n\n//Configurable variables\nlet maxSpellSlot = 5; //  Highest spell-slot level that may be used.\nlet affectedCreatureTypes = [\"fiend\", \"undead\", \"undead (shapechanger)\"]; //  Creature types that take extra damage.\n\n// Use token selected, or default character for the Actor if none is.\nlet s_actor = canvas.tokens.controlled[0]?.actor || game.user.character;     \n\n// Flag for selected slot type\nlet pactSlot = false;\n\n// Verifies if the actor can smite.\nif (s_actor?.data.items.find(i => i.name === \"Divine Smite\") === undefined){\n    return ui.notifications.error(`No valid actor selected that can use this macro.`);\n}\n\nlet confirmed = false;\nif (hasAvailableSlot(s_actor)) {\n\n    // Get options for available slots\n    let optionsText = \"\";\n    let i = 1;\n    for (; i < maxSpellSlot; i++) {\n        const slots = getSpellSlots(s_actor, i, false);\n        if (slots.value > 0) {\n            const level = CONFIG.DND5E.spellLevels[i];\n            const label = game.i18n.format('DND5E.SpellLevelSlot', {level: level, n: slots.value});\n            optionsText += `<option value=\"${i}\">${label}</option>`;\n        }\n    }\n\n    // Check for Pact slot\n    const slots = getSpellSlots(s_actor, 0, true);\n    if(slots.value > 0) {\n        i++;\n        const level = CONFIG.DND5E.spellLevels[slots.level];\n        const label = 'Pact: ' + game.i18n.format('DND5E.SpellLevelSlot', {level: level, n: slots.value});\n        optionsText += `<option value=\"${i}\">${label}</option>`;\n    }\n\n    // Create a dialogue box to select spell slot level to use when smiting.\n    new Dialog({\n        title: \"Divine Smite: Usage Configuration\",\n        content: `\n        <form id=\"smite-use-form\">\n            <p>` + game.i18n.format(\"DND5E.AbilityUseHint\", {name: \"Divine Smite\", type: \"feature\"}) + `</p>\n            <div class=\"form-group\">\n                <label>Spell Slot Level</label>\n                <div class=\"form-fields\">\n                    <select name=\"slot-level\">` + optionsText + `</select>\n                </div>\n            </div>\n\n            <div class=\"form-group\">\n                <label class=\"checkbox\">\n                <input type=\"checkbox\" name=\"consumeCheckbox\" checked/>` + game.i18n.localize(\"DND5E.SpellCastConsume\") + `</label>\n            </div>\n\n            <div class=\"form-group\">\n                <label class=\"checkbox\">\n                <input type=\"checkbox\" name=\"criticalCheckbox\"/>` + game.i18n.localize(\"DND5E.CriticalHit\") + \"?\" + `</label>\n            </div>\n        </form>\n        `,\n        buttons: {\n            one: {\n                icon: '<i class=\"fas fa-check\"></i>',\n                label: \"SMITE!\",\n                callback: () => confirmed = true\n            },\n            two: {\n                icon: '<i class=\"fas fa-times\"></i>',\n                label: \"Cancel\",\n                callback: () => confirmed = false\n            }\n        },\n        default: \"Cancel\",\n        close: html => {\n            if (confirmed) {\n                let slotLevel = parseInt(html.find('[name=slot-level]')[0].value);\n                if(slotLevel > maxSpellSlot) {\n                    slotLevel = actor.data.data.spells.pact.level;\n                    pactSlot = true;\n                }\n                const criticalHit = html.find('[name=criticalCheckbox]')[0].checked;\t\t\t\t\n                const consumeSlot = html.find('[name=consumeCheckbox]')[0].checked;\n                smite(s_actor, slotLevel, criticalHit, consumeSlot, pactSlot);\n            }\n        }\n    }).render(true);\n\n} else {\n    return ui.notifications.error(`No spell slots available to use this feature.`);    \n}\n\n/**\n * Gives the spell slot information for a particular actor and spell slot level.\n * @param {Actor5e} actor - the actor to get slot information from.\n * @param {integer} level - the spell slot level to get information about. level 0 is deprecated.\n * @param {boolean} isPact - whether the spell slot is obtained through pact.\n * @returns {object} contains value (number of slots remaining), max, and override.\n */\nfunction getSpellSlots(actor, level, isPact) {\n    if(isPact == false) {\n        return actor.data.data.spells[`spell${level}`];\n    }\n    else {\n        return actor.data.data.spells.pact;\n    }\n}\n\n/**\n * Returns whether the actor has any spell slot left.\n * @param {Actor5e} actor - the actor to get slot information from.\n * @returns {boolean} True if any spell slots of any spell level are available to be used.\n */\n function hasAvailableSlot(actor) {\n    for (let slot in actor.data.data.spells) {\n        if (actor.data.data.spells[slot].value > 0) {\n            return true;\n        }\n    }\n    return false;\n }\n\n/**\n * Use the controlled token to smite the targeted token.\n * @param {Actor5e} actor - the actor that is performing the action.\n * @param {integer} slotLevel - the spell slot level to use when smiting.\n * @param {boolean} criticalHit - whether the hit is a critical hit.\n * @param {boolean} consume - whether to consume the spell slot.\n * @param {boolean} isPact - whether the spell slot used is obtained through pact.\n */\nasync function smite(actor, slotLevel, criticalHit, consume, isPact) {\n    let targets = game.user.targets;\n\n    let chosenSpellSlots = getSpellSlots(actor, slotLevel, isPact);\n\n    if (chosenSpellSlots.value < 1) {\n        ui.notifications.error(\"No spell slots of the required level available.\");\n        return;\n    }\n    if (targets.size !== 1) {\n        ui.notifications.error(\"You must target exactly one token to Smite.\");\n        return;\n    }\n\n    const [target] = targets;\n    let numDice = slotLevel + 1;\n    let type = target.actor.data.data.details.type.value?.toLocaleLowerCase();\n    if (affectedCreatureTypes.includes(type)) numDice += 1;\n    if (criticalHit) numDice *= 2;\n    const flavor = `Macro Divine Smite - ${game.i18n.localize(\"DND5E.DamageRoll\")} (${game.i18n.localize(\"DND5E.DamageRadiant\")})`;\n    let damageRoll = new Roll(`${numDice}d8`);\n\n    let targetActor = game.user.targets.values().next().value.actor;\n    \n    if (targetActor.permission !== CONST.ENTITY_PERMISSIONS.OWNER) {\n        // We need help applying the damage, so make a roll message for right-click convenience.\n        await damageRoll.toMessage({\n            speaker: ChatMessage.getSpeaker(),\n            flavor: `${actor.name} smited ${targetActor.data.name}.<br>${flavor}\n            <p><em>Manually apply (or right-click) ${damageRoll.result} HP of damage to ${targetActor.data.name}</em></p>` });\n    }\n    else {\n        // We can apply damage automatically, so just show a normal chat message.\n        await damageRoll.toMessage({\n            speaker: ChatMessage.getSpeaker(),\n            flavor: `${actor.name} smited ${targetActor.data.name}.<br>${flavor}\n            <p><em>${targetActor.data.name} has taken ${damageRoll.result} HP of damage.</em></p>` });\n        targetActor.update({\"data.attributes.hp.value\" : targetActor.data.data.attributes.hp.value - damageRoll.result});\n    }\n\n    if (consume){\n        let objUpdate = new Object();\n        if(isPact == false) {\n            objUpdate['data.spells.spell' + slotLevel + '.value'] = chosenSpellSlots.value - 1;\n        }\n        else {\n            objUpdate['data.spells.pact.value'] = chosenSpellSlots.value - 1;\n        }\n        \n        actor.update(objUpdate);\n    }\n}\n\n})();","folder":"dz7rvMlddmEBAhGn","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.foundry_community_macros.community-macros-5e.mzvF9reAuonv5d4a"}},"_id":"nsY5HZVfHtarglcn"}
{"name":"Set Token bars and nameplate","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"/* This will set every token in scene to always display their\r\n * token bars and nameplate, and sets the first bar to represent \r\n * HP and removes the second token bar.\r\n*/\r\n\r\nconst tokens =canvas.tokens.placeables.map(token => {\r\n   return {\r\n       _id: token.id,\r\n       \"bar1.attribute\": \"attributes.hp\",\r\n       \"bar2.attribute\": \"\",\r\n       \"displayName\": CONST.TOKEN_DISPLAY_MODES.ALWAYS,\r\n       \"displayBars\": CONST.TOKEN_DISPLAY_MODES.ALWAYS\r\n   };\r\n});\r\n\r\ncanvas.scene.updateEmbeddedEntity('Token', tokens)","folder":"cqjFxCW4yJ1VFA4W","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.advanced-macros.macros.rKmHs6LsBtDjPDhK"}},"_id":"prnUmEmQgPIhIJYg"}
{"name":"play-audio","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"/* This macro requires the advanced macros of Furnace\r\n * This will play audio from a URL\r\n * Takes the URL of the audio file as its first argument\r\n * The second argument, if set to true, will play the audio for every other player too.\r\n * Example: /play-audio \"https://example.com/sound-effects/explosion.mp3\" true\r\n */\r\nconst url = args[0];\r\nconst push = args[1];\r\n\r\nAudioHelper.play({src: [url]}, push);","folder":"cqjFxCW4yJ1VFA4W","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.advanced-macros.macros.yUlSqozYscIEOGz1"}},"_id":"qRtF8lgH6gOy01k7"}
{"_id":"qylRGB7jwOBHtAwy","name":"Darkness (DDB - GM)","type":"script","author":"BE1AvdNlONTKAxyV","img":"systems/dnd5e/icons/skills/shadow_10.jpg","scope":"global","command":"// This Macro is called by the Darkness spell so players can place walls and lights.\n\nconst darknessParams = args[args.length - 1];\n\nfunction circleWall(cx, cy, radius) {\n  let walls = [];\n  const step = 30;\n  for (let i = step; i <= 360; i += step) {\n    let theta0 = Math.toRadians(i - step);\n    let theta1 = Math.toRadians(i);\n\n    let lastX = Math.floor(radius * Math.cos(theta0) + cx);\n    let lastY = Math.floor(radius * Math.sin(theta0) + cy);\n    let newX = Math.floor(radius * Math.cos(theta1) + cx);\n    let newY = Math.floor(radius * Math.sin(theta1) + cy);\n\n    walls.push({\n      c: [lastX, lastY, newX, newY],\n      move: CONST.WALL_MOVEMENT_TYPES.NONE,\n      light: CONST.WALL_SENSE_TYPES.NORMAL,\n      sight: CONST.WALL_SENSE_TYPES.NORMAL,\n      sound: CONST.WALL_SENSE_TYPES.NONE,\n      dir: CONST.WALL_DIRECTIONS.BOTH,\n      door: CONST.WALL_DOOR_TYPES.NONE,\n      ds: CONST.WALL_DOOR_STATES.CLOSED,\n      flags: {\n        spellEffects: {\n          Darkness: {\n            ActorId: darknessParams.targetActorId,\n          },\n        },\n      },\n    });\n  }\n\n  canvas.scene.createEmbeddedDocuments(\"Wall\", walls);\n}\n\nfunction darknessLight(cx, cy, radius) {\n  const lightTemplate = {\n    x: cx,\n    y: cy,\n    rotation: 0,\n    walls: false,\n    vision: false,\n    config: {\n      alpha: 0.5,\n      angle: 0,\n      bright: radius,\n      coloration: 1,\n      dim: 0,\n      gradual: false,\n      luminosity: -1,\n      saturation: 0,\n      contrast: 0,\n      shadows: 0,\n      animation: {\n        speed: 5,\n        intensity: 5,\n        reverse: false,\n      },\n      darkness: {\n        min: 0,\n        max: 1,\n      },\n      color: null,\n    },\n    hidden: false,\n    flags: {\n      spellEffects: {\n        Darkness: {\n          ActorId: darknessParams.targetActorId,\n        },\n      },\n      \"perfect-vision\": {\n        sightLimit: 0,\n      },\n    },\n  };\n  canvas.scene.createEmbeddedDocuments(\"AmbientLight\", [lightTemplate]);\n}\n\nif (args[0] == \"on\") {\n  if (!game.modules.get(\"perfect-vision\")?.active) circleWall(darknessParams.x, darknessParams.y, darknessParams.radius);\n  darknessLight(darknessParams.x, darknessParams.y, darknessParams.distance);\n}\n\nif (args[0] == \"off\") {\n  const darkWalls = canvas.walls.placeables.filter((w) => w.data.flags?.spellEffects?.Darkness?.ActorId === darknessParams.targetActorId);\n  const wallArray = darkWalls.map((w) => w.id);\n  const darkLights = canvas.lighting.placeables.filter((w) => w.data.flags?.spellEffects?.Darkness?.ActorId === darknessParams.targetActorId);\n  const lightArray = darkLights.map((w) => w.id);\n  await canvas.scene.deleteEmbeddedDocuments(\"Wall\", wallArray);\n  await canvas.scene.deleteEmbeddedDocuments(\"AmbientLight\", lightArray);\n}","folder":"tLdk9RPmRibh78pL","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"advanced-macros":{"runAsGM":true}}}
{"name":"New Macro","type":"chat","author":"BE1AvdNlONTKAxyV","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{},"_id":"v1rWy7OZvMiIgdz3"}
{"name":"Disallow token creation","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"// After running this macro, it will be impossible to drop any new tokens onto the scene, regardless of user permission\r\n// Running the 'Restore token creation' macro will restore the normal behavior.\r\n\r\nif (game.disallow_token_creation_id)\r\n   Hooks.off('preCreatetoken', game.disallow_token_creation_id);\r\ngame.disallow_token_creation_id = Hooks.on(\"preCreateToken\", () => false);","folder":"cqjFxCW4yJ1VFA4W","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.advanced-macros.macros.Tu27SXg668TmcI1X"}},"_id":"wCk4PIliFVAlnbgD"}
{"name":"Animate Tiny Weapons","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"function printMessage(message){\n\tlet chatData = {\n\t\tuser : game.user._id,\n\t\tcontent : message,\n\t\t//blind: true,\n\t\twhisper : game.users.entities.filter(u => u.isGM).map(u => u._id)\n\t};\n\n\tChatMessage.create(chatData,{});\t\n}\n\n\nfunction OutputManySameDice(dicearray){\n\tlet output = `\n<div class=\"dice-roll\">\n\t<div class=\"dice-result\">\n\t\t<div class=\"dice-formula\">${dicearray.length}d${dicearray[0].dice[0].faces} + 8</div>\n\t\t<div class=\"dice-tooltip\">\n\t\t\t<section class=\"tooltip-part\">\n\t\t\t\t<div class=\"dice\">\n\t\t\t\t\t<header class=\"part-header flexrow\">\n\t\t\t\t\t<span class=\"part-formula\">${dicearray.length}d${dicearray[0].dice[0].faces}</span>`\n\n\tfor (var i = 0; i < dicearray.length; i++) {\n\t\toutput += `\n\t\t\t\t\t\t<span class=\"part-total\">${dicearray[i].terms[0].results[0].result}</span>`\n\t}\n\n\toutput = output + `\n\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<ol class=\"dice-rolls\">`\n\n\tfor (var i = 0; i < dicearray.length; i++) {\n\t\tif (dicearray[i].terms[0].results[0].result == 1) {\n\t\t\toutput += `<li class=\"roll die d${dicearray[i].dice[0].faces} min\">${dicearray[i].terms[0].results[0].result}</li>`\n\t\t}\n\t\telse if (dicearray[i].terms[0].results[0].result == dicearray[i].dice[0].faces){\n\t\t\toutput += `<li class=\"roll die d${dicearray[i].dice[0].faces} max\">${dicearray[i].terms[0].results[0].result}</li>`\n\t\t}\n\t\telse{\n\t\t\toutput += `<li class=\"roll die d${dicearray[i].dice[0].faces}\">${dicearray[i].terms[0].results[0].result}</li>`\n\t\t}\n\t}\n\toutput = output + `    \n\t\t\t\t\t</ol>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t</div>\n\t\t`\n\n\tfor (var i = 0; i < dicearray.length; i++) {\n\t\tif (dicearray[i].terms[0].results[0].result == 1) {\n\t\t\toutput += `<h4 class=\"dice-total fumble\">${dicearray[i].total}</h4>`\n\t\t}\n\t\telse if (dicearray[i].terms[0].results[0].result == dicearray[i].dice[0].faces){\n\t\t\toutput += `<h4 class=\"dice-total critical\">${dicearray[i].total}</h4>`\n\t\t}\n\t\telse{\n\t\t\toutput += `<h4 class=\"dice-total\">${dicearray[i].total}</h4>`\n\t\t}\n\t}\n\n\toutput += `\n\t</div>\n</div>`\n\n\treturn output\n}\n\n\n\n\n\n//Launch Dialog message with a counter from 1-10 for the number of dice to roll\nnew Dialog({\n\ttitle: `Animate Objects (tiny)`,\n\tcontent: `\n\t\t<form>\n\t\t\t<div style=\"display: inline-block; width: 100%; margin-bottom: 10px\">\n\t\t\t\t<label for=\"output-options\" style=\"margin-right: 10px\">Number of Objects:</label>\n\t\t\t\t<select id=\"output-options\" />\n\t\t\t\t\t<option value=\"1\">1</option>\n\t\t\t\t\t<option value=\"2\">2</option>\n\t\t\t\t\t<option value=\"3\">3</option>\n\t\t\t\t\t<option value=\"4\">4</option>\n\t\t\t\t\t<option value=\"5\">5</option>\n\t\t\t\t\t<option value=\"6\">6</option>\n\t\t\t\t\t<option value=\"7\">7</option>\n\t\t\t\t\t<option value=\"8\">8</option>\n\t\t\t\t\t<option value=\"9\">9</option>\n\t\t\t\t\t<option value=\"10\">10</option>\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t</form>\n\t`,\n\tbuttons: {\n\t\tyes: {\n\t\t\ticon: \"<i class='fas fa-check'></i>\",\n\t\t\tlabel: `Attack`,\n\t\t\tcallback: (html) => {\n\t\t\t\tlet count = html.find('#output-options').val();\n\t\t\t\tlet rolls = [];\n\t\t\t\tlet debugOutput = \"\";\n\n\t\t\t\t//Do attack Rolls\n\t\t\t\tfor (var i = 0; i < count; i++) {\n\t\t\t\t\tlet roll = new Roll(`1d20+8`);\n\n\t\t\t\t\trolls.push(roll.evaluate());\n\t\t\t\t\t//console.log(rolls);\n\t\t\t\t\t//console.log(rolls[rolls.length - 1].terms);\n\n\t\t\t\t\tdebugOutput = debugOutput.concat(rolls[rolls.length - 1].total);\n\t\t\t\t\tdebugOutput = debugOutput.concat(\" \");\n\t\t\t\t}\n\t\t\t\t//console.log(debugOutput);\n\t\t\t\tprintMessage(\"Animated Weapons (tiny) Attacks: \" + OutputManySameDice(rolls));\n\n\t\t\t}\n\t\t},\n\t\tno: {\n\t\t\ticon: \"<i class='fas fa-times'></i>\",\n\t\t\tlabel: `Cancel`\n\t\t},\n\t},\n\tdefault: \"yes\"\n}).render(true)","folder":"dz7rvMlddmEBAhGn","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Macro.YnunhSHB2aQOFWYz"}},"_id":"y5W75a3uOmKhOspc"}
{"name":"Bane","type":"script","author":"BE1AvdNlONTKAxyV","img":"https://assets.forge-vtt.com/bazaar/core/icons/svg/dice-target.svg","scope":"global","command":"// new build for Bane macro by Penguin#0949 with help from Kotetsushin#7680\n// version beta 4.2.0\n\n// user notes\n// this macro is inteded for use by the recipient of the Bane spell in D&D 5e on Forge VTT\n// N.B. every recipient will need to use this macro independantly on their own Actor/token.\n\n//user modifiable declarations CHANGE AT YOUR OWN RISK\nconst baneIconPath = 'icons/svg/degen.svg';\nlet baneMsg = ' is Baned!';\nlet endbaneMsg = ' is no longer Baned.';\n\n//fixed declarations DO NOT MODIFY\nlet macroActor = token.actor;\nlet chatMsg = '';\nlet Baned = macroActor.effects.find(i => i.data.label === \"Baned\")\nlet bane = {\n    changes: [\n        {\n            key: \"data.bonuses.mwak.attack\",\n            mode: 2,\n            priority: 20,\n            value: \"-1d4\",\n        },\n        {\n            key: \"data.bonuses.rwak.attack\",\n            mode: 2,\n            priority: 20,\n            value: \"-1d4\",\n        },\n\t\t{\n            key: \"data.bonuses.msak.attack\",\n            mode: 2,\n            priority: 20,\n            value: \"-1d4\",\n        },\n\t\t{\n            key: \"mdata.bonuses.rsak.attack\",\n            mode: 2,\n            priority: 20,\n            value: \"-1d4\",\n        },\n\t\t{\n            key: \"data.bonuses.abilities.save\",\n            mode: 2,\n            priority: 20,\n            value: \"-1d4\",\n        },\n    ],\n    duration: {\n        seconds: 60,\n    },\n    icon: baneIconPath,\n    label: \"Baned\"\n}\n//identify token\nif (macroActor === undefined || macroActor === null) {\n  ui.notifications.warn(\"Please select a token first.\");\n} \nelse {\n// If already bless\t\nif (Baned) {\n    macroActor.deleteEmbeddedDocuments(\"ActiveEffect\", [Baned.id])\n// anounce to chat\n\tchatMsg = `${macroActor.name} ${endbaneMsg}`;\n}\n// if not already bless\t\nelse {\n    macroActor.createEmbeddedDocuments(\"ActiveEffect\", [bane])\t\n// anounce to chat\n\t\tchatMsg = `${macroActor.name} ${baneMsg}`;\n}\n// write to chat if needed:\nif (chatMsg !== '') {\n\tlet chatData = {\n\t\tuser: game.user._id,\n\t\tspeaker: ChatMessage.getSpeaker(),\n\t\tcontent: chatMsg\n\t};\n\tChatMessage.create(chatData, {});\n}\n}","folder":"dz7rvMlddmEBAhGn","sort":0,"permission":{"default":0,"BE1AvdNlONTKAxyV":3},"flags":{"core":{"sourceId":"Compendium.foundry_community_macros.community-macros-5e.VI7m4TbGvbs99h3O"}},"_id":"yqtNFehhypyBLlNI"}
